/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package bj.bigData.HBase.ex03.query.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class CountCondition implements org.apache.thrift.TBase< CountCondition, CountCondition._Fields >, java.io.Serializable, Cloneable {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "CountCondition" );

	private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC      = new org.apache.thrift.protocol.TField( "table", org.apache.thrift.protocol.TType.STRING, ( short ) 1 );
	private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField( "attributes", org.apache.thrift.protocol.TType.MAP, ( short ) 2 );
	private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC    = new org.apache.thrift.protocol.TField( "timeout", org.apache.thrift.protocol.TType.I32, ( short ) 3 );

	private static final Map< Class< ? extends IScheme >, SchemeFactory > schemes = new HashMap< Class< ? extends IScheme >, SchemeFactory >();

	static {
		schemes.put( StandardScheme.class, new CountConditionStandardSchemeFactory() );
		schemes.put( TupleScheme.class, new CountConditionTupleSchemeFactory() );
	}

	public String                table; // required
	public Map< String, String > attributes; // required
	public int                   timeout; // required

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		TABLE( ( short ) 1, "table" ),
		ATTRIBUTES( ( short ) 2, "attributes" ),
		TIMEOUT( ( short ) 3, "timeout" );

		private static final Map< String, _Fields > byName = new HashMap< String, _Fields >();

		static {
			for ( _Fields field : EnumSet.allOf( _Fields.class ) ) {
				byName.put( field.getFieldName(), field );
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId( int fieldId ) {

			switch ( fieldId ) {
				case 1: // TABLE
					return TABLE;
				case 2: // ATTRIBUTES
					return ATTRIBUTES;
				case 3: // TIMEOUT
					return TIMEOUT;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow( int fieldId ) {

			_Fields fields = findByThriftId( fieldId );
			if ( fields == null ) {
				throw new IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
			}
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName( String name ) {

			return byName.get( name );
		}

		private final short  _thriftId;
		private final String _fieldName;

		_Fields( short thriftId, String fieldName ) {

			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {

			return _thriftId;
		}

		public String getFieldName() {

			return _fieldName;
		}
	}

	// isset id assignments
	private static final int  __TIMEOUT_ISSET_ID = 0;
	private              byte __isset_bitfield   = 0;
	public static final Map< _Fields, org.apache.thrift.meta_data.FieldMetaData > metaDataMap;

	static {
		Map< _Fields, org.apache.thrift.meta_data.FieldMetaData > tmpMap = new EnumMap< _Fields, org.apache.thrift.meta_data.FieldMetaData >( _Fields.class );
		tmpMap.put( _Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData( "table", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) );
		tmpMap.put( _Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData( "attributes", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData( org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ),
						new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) ) );
		tmpMap.put( _Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData( "timeout", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
		metaDataMap = Collections.unmodifiableMap( tmpMap );
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( CountCondition.class, metaDataMap );
	}

	public CountCondition() {

	}

	public CountCondition(
			String table,
			Map< String, String > attributes,
			int timeout ) {

		this();
		this.table = table;
		this.attributes = attributes;
		this.timeout = timeout;
		setTimeoutIsSet( true );
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public CountCondition( CountCondition other ) {

		__isset_bitfield = other.__isset_bitfield;
		if ( other.isSetTable() ) {
			this.table = other.table;
		}
		if ( other.isSetAttributes() ) {
			Map< String, String > __this__attributes = new HashMap< String, String >();
			for ( Map.Entry< String, String > other_element : other.attributes.entrySet() ) {

				String other_element_key   = other_element.getKey();
				String other_element_value = other_element.getValue();

				String __this__attributes_copy_key = other_element_key;

				String __this__attributes_copy_value = other_element_value;

				__this__attributes.put( __this__attributes_copy_key, __this__attributes_copy_value );
			}
			this.attributes = __this__attributes;
		}
		this.timeout = other.timeout;
	}

	public CountCondition deepCopy() {

		return new CountCondition( this );
	}

	@Override
	public void clear() {

		this.table = null;
		this.attributes = null;
		setTimeoutIsSet( false );
		this.timeout = 0;
	}

	public String getTable() {

		return this.table;
	}

	public CountCondition setTable( String table ) {

		this.table = table;
		return this;
	}

	public void unsetTable() {

		this.table = null;
	}

	/** Returns true if field table is set (has been assigned a value) and false otherwise */
	public boolean isSetTable() {

		return this.table != null;
	}

	public void setTableIsSet( boolean value ) {

		if ( !value ) {
			this.table = null;
		}
	}

	public int getAttributesSize() {

		return ( this.attributes == null ) ? 0 : this.attributes.size();
	}

	public void putToAttributes( String key, String val ) {

		if ( this.attributes == null ) {
			this.attributes = new HashMap< String, String >();
		}
		this.attributes.put( key, val );
	}

	public Map< String, String > getAttributes() {

		return this.attributes;
	}

	public CountCondition setAttributes( Map< String, String > attributes ) {

		this.attributes = attributes;
		return this;
	}

	public void unsetAttributes() {

		this.attributes = null;
	}

	/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
	public boolean isSetAttributes() {

		return this.attributes != null;
	}

	public void setAttributesIsSet( boolean value ) {

		if ( !value ) {
			this.attributes = null;
		}
	}

	public int getTimeout() {

		return this.timeout;
	}

	public CountCondition setTimeout( int timeout ) {

		this.timeout = timeout;
		setTimeoutIsSet( true );
		return this;
	}

	public void unsetTimeout() {

		__isset_bitfield = EncodingUtils.clearBit( __isset_bitfield, __TIMEOUT_ISSET_ID );
	}

	/** Returns true if field timeout is set (has been assigned a value) and false otherwise */
	public boolean isSetTimeout() {

		return EncodingUtils.testBit( __isset_bitfield, __TIMEOUT_ISSET_ID );
	}

	public void setTimeoutIsSet( boolean value ) {

		__isset_bitfield = EncodingUtils.setBit( __isset_bitfield, __TIMEOUT_ISSET_ID, value );
	}

	public void setFieldValue( _Fields field, Object value ) {

		switch ( field ) {
			case TABLE:
				if ( value == null ) {
					unsetTable();
				} else {
					setTable( ( String ) value );
				}
				break;

			case ATTRIBUTES:
				if ( value == null ) {
					unsetAttributes();
				} else {
					setAttributes( ( Map< String, String > ) value );
				}
				break;

			case TIMEOUT:
				if ( value == null ) {
					unsetTimeout();
				} else {
					setTimeout( ( Integer ) value );
				}
				break;

		}
	}

	public Object getFieldValue( _Fields field ) {

		switch ( field ) {
			case TABLE:
				return getTable();

			case ATTRIBUTES:
				return getAttributes();

			case TIMEOUT:
				return Integer.valueOf( getTimeout() );

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet( _Fields field ) {

		if ( field == null ) {
			throw new IllegalArgumentException();
		}

		switch ( field ) {
			case TABLE:
				return isSetTable();
			case ATTRIBUTES:
				return isSetAttributes();
			case TIMEOUT:
				return isSetTimeout();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals( Object that ) {

		if ( that == null ) {
			return false;
		}
		if ( that instanceof CountCondition ) {
			return this.equals( ( CountCondition ) that );
		}
		return false;
	}

	public boolean equals( CountCondition that ) {

		if ( that == null ) {
			return false;
		}

		boolean this_present_table = true && this.isSetTable();
		boolean that_present_table = true && that.isSetTable();
		if ( this_present_table || that_present_table ) {
			if ( !( this_present_table && that_present_table ) ) {
				return false;
			}
			if ( !this.table.equals( that.table ) ) {
				return false;
			}
		}

		boolean this_present_attributes = true && this.isSetAttributes();
		boolean that_present_attributes = true && that.isSetAttributes();
		if ( this_present_attributes || that_present_attributes ) {
			if ( !( this_present_attributes && that_present_attributes ) ) {
				return false;
			}
			if ( !this.attributes.equals( that.attributes ) ) {
				return false;
			}
		}

		boolean this_present_timeout = true;
		boolean that_present_timeout = true;
		if ( this_present_timeout || that_present_timeout ) {
			if ( !( this_present_timeout && that_present_timeout ) ) {
				return false;
			}
			if ( this.timeout != that.timeout ) {
				return false;
			}
		}

		return true;
	}

	@Override
	public int hashCode() {

		return 0;
	}

	public int compareTo( CountCondition other ) {

		if ( !getClass().equals( other.getClass() ) ) {
			return getClass().getName().compareTo( other.getClass().getName() );
		}

		int            lastComparison = 0;
		CountCondition typedOther     = ( CountCondition ) other;

		lastComparison = Boolean.valueOf( isSetTable() ).compareTo( typedOther.isSetTable() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetTable() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.table, typedOther.table );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf( isSetAttributes() ).compareTo( typedOther.isSetAttributes() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetAttributes() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.attributes, typedOther.attributes );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf( isSetTimeout() ).compareTo( typedOther.isSetTimeout() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetTimeout() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.timeout, typedOther.timeout );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId( int fieldId ) {

		return _Fields.findByThriftId( fieldId );
	}

	public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {

		schemes.get( iprot.getScheme() ).getScheme().read( iprot, this );
	}

	public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {

		schemes.get( oprot.getScheme() ).getScheme().write( oprot, this );
	}

	@Override
	public String toString() {

		StringBuilder sb    = new StringBuilder( "CountCondition(" );
		boolean       first = true;

		sb.append( "table:" );
		if ( this.table == null ) {
			sb.append( "null" );
		} else {
			sb.append( this.table );
		}
		first = false;
		if ( !first ) {
			sb.append( ", " );
		}
		sb.append( "attributes:" );
		if ( this.attributes == null ) {
			sb.append( "null" );
		} else {
			sb.append( this.attributes );
		}
		first = false;
		if ( !first ) {
			sb.append( ", " );
		}
		sb.append( "timeout:" );
		sb.append( this.timeout );
		first = false;
		sb.append( ")" );
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {

		try {
			write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
		} catch ( org.apache.thrift.TException te ) {
			throw new java.io.IOException( te );
		}
	}

	private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, ClassNotFoundException {

		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
		} catch ( org.apache.thrift.TException te ) {
			throw new java.io.IOException( te );
		}
	}

	private static class CountConditionStandardSchemeFactory implements SchemeFactory {

		public CountConditionStandardScheme getScheme() {

			return new CountConditionStandardScheme();
		}
	}

	private static class CountConditionStandardScheme extends StandardScheme< CountCondition > {

		public void read( org.apache.thrift.protocol.TProtocol iprot, CountCondition struct ) throws org.apache.thrift.TException {

			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while ( true ) {
				schemeField = iprot.readFieldBegin();
				if ( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
					break;
				}
				switch ( schemeField.id ) {
					case 1: // TABLE
						if ( schemeField.type == org.apache.thrift.protocol.TType.STRING ) {
							struct.table = iprot.readString();
							struct.setTableIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					case 2: // ATTRIBUTES
						if ( schemeField.type == org.apache.thrift.protocol.TType.MAP ) {
							{
								org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
								struct.attributes = new HashMap< String, String >( 2 * _map24.size );
								for ( int _i25 = 0; _i25 < _map24.size; ++_i25 ) {
									String _key26; // required
									String _val27; // required
									_key26 = iprot.readString();
									_val27 = iprot.readString();
									struct.attributes.put( _key26, _val27 );
								}
								iprot.readMapEnd();
							}
							struct.setAttributesIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					case 3: // TIMEOUT
						if ( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
							struct.timeout = iprot.readI32();
							struct.setTimeoutIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot, CountCondition struct ) throws org.apache.thrift.TException {

			struct.validate();

			oprot.writeStructBegin( STRUCT_DESC );
			if ( struct.table != null ) {
				oprot.writeFieldBegin( TABLE_FIELD_DESC );
				oprot.writeString( struct.table );
				oprot.writeFieldEnd();
			}
			if ( struct.attributes != null ) {
				oprot.writeFieldBegin( ATTRIBUTES_FIELD_DESC );
				{
					oprot.writeMapBegin( new org.apache.thrift.protocol.TMap( org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.attributes.size() ) );
					for ( Map.Entry< String, String > _iter28 : struct.attributes.entrySet() ) {
						oprot.writeString( _iter28.getKey() );
						oprot.writeString( _iter28.getValue() );
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin( TIMEOUT_FIELD_DESC );
			oprot.writeI32( struct.timeout );
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class CountConditionTupleSchemeFactory implements SchemeFactory {

		public CountConditionTupleScheme getScheme() {

			return new CountConditionTupleScheme();
		}
	}

	private static class CountConditionTupleScheme extends TupleScheme< CountCondition > {

		@Override
		public void write( org.apache.thrift.protocol.TProtocol prot, CountCondition struct ) throws org.apache.thrift.TException {

			TTupleProtocol oprot     = ( TTupleProtocol ) prot;
			BitSet         optionals = new BitSet();
			if ( struct.isSetTable() ) {
				optionals.set( 0 );
			}
			if ( struct.isSetAttributes() ) {
				optionals.set( 1 );
			}
			if ( struct.isSetTimeout() ) {
				optionals.set( 2 );
			}
			oprot.writeBitSet( optionals, 3 );
			if ( struct.isSetTable() ) {
				oprot.writeString( struct.table );
			}
			if ( struct.isSetAttributes() ) {
				{
					oprot.writeI32( struct.attributes.size() );
					for ( Map.Entry< String, String > _iter29 : struct.attributes.entrySet() ) {
						oprot.writeString( _iter29.getKey() );
						oprot.writeString( _iter29.getValue() );
					}
				}
			}
			if ( struct.isSetTimeout() ) {
				oprot.writeI32( struct.timeout );
			}
		}

		@Override
		public void read( org.apache.thrift.protocol.TProtocol prot, CountCondition struct ) throws org.apache.thrift.TException {

			TTupleProtocol iprot    = ( TTupleProtocol ) prot;
			BitSet         incoming = iprot.readBitSet( 3 );
			if ( incoming.get( 0 ) ) {
				struct.table = iprot.readString();
				struct.setTableIsSet( true );
			}
			if ( incoming.get( 1 ) ) {
				{
					org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap( org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32() );
					struct.attributes = new HashMap< String, String >( 2 * _map30.size );
					for ( int _i31 = 0; _i31 < _map30.size; ++_i31 ) {
						String _key32; // required
						String _val33; // required
						_key32 = iprot.readString();
						_val33 = iprot.readString();
						struct.attributes.put( _key32, _val33 );
					}
				}
				struct.setAttributesIsSet( true );
			}
			if ( incoming.get( 2 ) ) {
				struct.timeout = iprot.readI32();
				struct.setTimeoutIsSet( true );
			}
		}
	}

}

