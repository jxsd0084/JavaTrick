/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bj.bigData.HBase.ex03.query.thrift;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class QueryService {

  public interface Iface {

    public Result count( CountCondition condition ) throws org.apache.thrift.TException;

    public Result queryAccessLog( CommonCondition commonCondition, MainCondition condition ) throws org.apache.thrift.TException;

    public Result queryMonitorLog( CommonCondition commonCondition, MainCondition condition ) throws org.apache.thrift.TException;

    public Result queryFilterLog( CommonCondition commonCondition, MainCondition condition ) throws org.apache.thrift.TException;

    public Result queryMonitorIpInfo( CommonCondition commonCondition, MainCondition condition ) throws org.apache.thrift.TException;

    public Result queryIllegalInfo( CommonCondition commonCondition, MainCondition condition ) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void count( CountCondition condition, org.apache.thrift.async.AsyncMethodCallback< AsyncClient.count_call > resultHandler ) throws org.apache.thrift.TException;

    public void queryAccessLog( CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback< AsyncClient.queryAccessLog_call > resultHandler ) throws org.apache.thrift.TException;

    public void queryMonitorLog( CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback< AsyncClient.queryMonitorLog_call > resultHandler ) throws org.apache.thrift.TException;

    public void queryFilterLog( CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback< AsyncClient.queryFilterLog_call > resultHandler ) throws org.apache.thrift.TException;

    public void queryMonitorIpInfo( CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback< AsyncClient.queryMonitorIpInfo_call > resultHandler ) throws org.apache.thrift.TException;

    public void queryIllegalInfo( CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback< AsyncClient.queryIllegalInfo_call > resultHandler ) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Result count(CountCondition condition) throws org.apache.thrift.TException
    {
      send_count(condition);
      return recv_count();
    }

    public void send_count(CountCondition condition) throws org.apache.thrift.TException
    {
      count_args args = new count_args();
      args.setCondition(condition);
      sendBase("count", args);
    }

    public Result recv_count() throws org.apache.thrift.TException
    {
      count_result result = new count_result();
      receiveBase(result, "count");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "count failed: unknown result");
    }

    public Result queryAccessLog(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      send_queryAccessLog(commonCondition, condition);
      return recv_queryAccessLog();
    }

    public void send_queryAccessLog(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      queryAccessLog_args args = new queryAccessLog_args();
      args.setCommonCondition(commonCondition);
      args.setCondition(condition);
      sendBase("queryAccessLog", args);
    }

    public Result recv_queryAccessLog() throws org.apache.thrift.TException
    {
      queryAccessLog_result result = new queryAccessLog_result();
      receiveBase(result, "queryAccessLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAccessLog failed: unknown result");
    }

    public Result queryMonitorLog(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      send_queryMonitorLog(commonCondition, condition);
      return recv_queryMonitorLog();
    }

    public void send_queryMonitorLog(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      queryMonitorLog_args args = new queryMonitorLog_args();
      args.setCommonCondition(commonCondition);
      args.setCondition(condition);
      sendBase("queryMonitorLog", args);
    }

    public Result recv_queryMonitorLog() throws org.apache.thrift.TException
    {
      queryMonitorLog_result result = new queryMonitorLog_result();
      receiveBase(result, "queryMonitorLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMonitorLog failed: unknown result");
    }

    public Result queryFilterLog(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      send_queryFilterLog(commonCondition, condition);
      return recv_queryFilterLog();
    }

    public void send_queryFilterLog(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      queryFilterLog_args args = new queryFilterLog_args();
      args.setCommonCondition(commonCondition);
      args.setCondition(condition);
      sendBase("queryFilterLog", args);
    }

    public Result recv_queryFilterLog() throws org.apache.thrift.TException
    {
      queryFilterLog_result result = new queryFilterLog_result();
      receiveBase(result, "queryFilterLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryFilterLog failed: unknown result");
    }

    public Result queryMonitorIpInfo(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      send_queryMonitorIpInfo(commonCondition, condition);
      return recv_queryMonitorIpInfo();
    }

    public void send_queryMonitorIpInfo(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      queryMonitorIpInfo_args args = new queryMonitorIpInfo_args();
      args.setCommonCondition(commonCondition);
      args.setCondition(condition);
      sendBase("queryMonitorIpInfo", args);
    }

    public Result recv_queryMonitorIpInfo() throws org.apache.thrift.TException
    {
      queryMonitorIpInfo_result result = new queryMonitorIpInfo_result();
      receiveBase(result, "queryMonitorIpInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMonitorIpInfo failed: unknown result");
    }

    public Result queryIllegalInfo(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      send_queryIllegalInfo(commonCondition, condition);
      return recv_queryIllegalInfo();
    }

    public void send_queryIllegalInfo(CommonCondition commonCondition, MainCondition condition) throws org.apache.thrift.TException
    {
      queryIllegalInfo_args args = new queryIllegalInfo_args();
      args.setCommonCondition(commonCondition);
      args.setCondition(condition);
      sendBase("queryIllegalInfo", args);
    }

    public Result recv_queryIllegalInfo() throws org.apache.thrift.TException
    {
      queryIllegalInfo_result result = new queryIllegalInfo_result();
      receiveBase(result, "queryIllegalInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryIllegalInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void count(CountCondition condition, org.apache.thrift.async.AsyncMethodCallback<count_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      count_call method_call = new count_call(condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class count_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CountCondition condition;
      public count_call(CountCondition condition, org.apache.thrift.async.AsyncMethodCallback<count_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("count", org.apache.thrift.protocol.TMessageType.CALL, 0));
        count_args args = new count_args();
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_count();
      }
    }

    public void queryAccessLog(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryAccessLog_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAccessLog_call method_call = new queryAccessLog_call(commonCondition, condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAccessLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CommonCondition commonCondition;
      private MainCondition condition;
      public queryAccessLog_call(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryAccessLog_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonCondition = commonCondition;
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAccessLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAccessLog_args args = new queryAccessLog_args();
        args.setCommonCondition(commonCondition);
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAccessLog();
      }
    }

    public void queryMonitorLog(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryMonitorLog_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMonitorLog_call method_call = new queryMonitorLog_call(commonCondition, condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMonitorLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CommonCondition commonCondition;
      private MainCondition condition;
      public queryMonitorLog_call(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryMonitorLog_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonCondition = commonCondition;
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMonitorLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMonitorLog_args args = new queryMonitorLog_args();
        args.setCommonCondition(commonCondition);
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMonitorLog();
      }
    }

    public void queryFilterLog(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryFilterLog_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryFilterLog_call method_call = new queryFilterLog_call(commonCondition, condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryFilterLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CommonCondition commonCondition;
      private MainCondition condition;
      public queryFilterLog_call(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryFilterLog_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonCondition = commonCondition;
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryFilterLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryFilterLog_args args = new queryFilterLog_args();
        args.setCommonCondition(commonCondition);
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryFilterLog();
      }
    }

    public void queryMonitorIpInfo(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryMonitorIpInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMonitorIpInfo_call method_call = new queryMonitorIpInfo_call(commonCondition, condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMonitorIpInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CommonCondition commonCondition;
      private MainCondition condition;
      public queryMonitorIpInfo_call(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryMonitorIpInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonCondition = commonCondition;
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMonitorIpInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMonitorIpInfo_args args = new queryMonitorIpInfo_args();
        args.setCommonCondition(commonCondition);
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMonitorIpInfo();
      }
    }

    public void queryIllegalInfo(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryIllegalInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryIllegalInfo_call method_call = new queryIllegalInfo_call(commonCondition, condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryIllegalInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CommonCondition commonCondition;
      private MainCondition condition;
      public queryIllegalInfo_call(CommonCondition commonCondition, MainCondition condition, org.apache.thrift.async.AsyncMethodCallback<queryIllegalInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonCondition = commonCondition;
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryIllegalInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryIllegalInfo_args args = new queryIllegalInfo_args();
        args.setCommonCondition(commonCondition);
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryIllegalInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("count", new count());
      processMap.put("queryAccessLog", new queryAccessLog());
      processMap.put("queryMonitorLog", new queryMonitorLog());
      processMap.put("queryFilterLog", new queryFilterLog());
      processMap.put("queryMonitorIpInfo", new queryMonitorIpInfo());
      processMap.put("queryIllegalInfo", new queryIllegalInfo());
      return processMap;
    }

    public static class count<I extends Iface> extends org.apache.thrift.ProcessFunction<I, count_args> {
      public count() {
        super("count");
      }

      public count_args getEmptyArgsInstance() {
        return new count_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public count_result getResult(I iface, count_args args) throws org.apache.thrift.TException {
        count_result result = new count_result();
        result.success = iface.count(args.condition);
        return result;
      }
    }

    public static class queryAccessLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAccessLog_args> {
      public queryAccessLog() {
        super("queryAccessLog");
      }

      public queryAccessLog_args getEmptyArgsInstance() {
        return new queryAccessLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryAccessLog_result getResult(I iface, queryAccessLog_args args) throws org.apache.thrift.TException {
        queryAccessLog_result result = new queryAccessLog_result();
        result.success = iface.queryAccessLog(args.commonCondition, args.condition);
        return result;
      }
    }

    public static class queryMonitorLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMonitorLog_args> {
      public queryMonitorLog() {
        super("queryMonitorLog");
      }

      public queryMonitorLog_args getEmptyArgsInstance() {
        return new queryMonitorLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMonitorLog_result getResult(I iface, queryMonitorLog_args args) throws org.apache.thrift.TException {
        queryMonitorLog_result result = new queryMonitorLog_result();
        result.success = iface.queryMonitorLog(args.commonCondition, args.condition);
        return result;
      }
    }

    public static class queryFilterLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryFilterLog_args> {
      public queryFilterLog() {
        super("queryFilterLog");
      }

      public queryFilterLog_args getEmptyArgsInstance() {
        return new queryFilterLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryFilterLog_result getResult(I iface, queryFilterLog_args args) throws org.apache.thrift.TException {
        queryFilterLog_result result = new queryFilterLog_result();
        result.success = iface.queryFilterLog(args.commonCondition, args.condition);
        return result;
      }
    }

    public static class queryMonitorIpInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMonitorIpInfo_args> {
      public queryMonitorIpInfo() {
        super("queryMonitorIpInfo");
      }

      public queryMonitorIpInfo_args getEmptyArgsInstance() {
        return new queryMonitorIpInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMonitorIpInfo_result getResult(I iface, queryMonitorIpInfo_args args) throws org.apache.thrift.TException {
        queryMonitorIpInfo_result result = new queryMonitorIpInfo_result();
        result.success = iface.queryMonitorIpInfo(args.commonCondition, args.condition);
        return result;
      }
    }

    public static class queryIllegalInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryIllegalInfo_args> {
      public queryIllegalInfo() {
        super("queryIllegalInfo");
      }

      public queryIllegalInfo_args getEmptyArgsInstance() {
        return new queryIllegalInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryIllegalInfo_result getResult(I iface, queryIllegalInfo_args args) throws org.apache.thrift.TException {
        queryIllegalInfo_result result = new queryIllegalInfo_result();
        result.success = iface.queryIllegalInfo(args.commonCondition, args.condition);
        return result;
      }
    }

  }

  public static class count_args implements org.apache.thrift.TBase<count_args, count_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("count_args");

    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new count_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new count_argsTupleSchemeFactory());
    }

    public CountCondition condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONDITION((short)1, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CountCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(count_args.class, metaDataMap);
    }

    public count_args() {
    }

    public count_args(
      CountCondition condition)
    {
      this();
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public count_args(count_args other) {
      if (other.isSetCondition()) {
        this.condition = new CountCondition(other.condition);
      }
    }

    public count_args deepCopy() {
      return new count_args(this);
    }

    @Override
    public void clear() {
      this.condition = null;
    }

    public CountCondition getCondition() {
      return this.condition;
    }

    public count_args setCondition(CountCondition condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((CountCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof count_args)
        return this.equals((count_args)that);
      return false;
    }

    public boolean equals(count_args that) {
      if (that == null)
        return false;

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(count_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      count_args typedOther = (count_args)other;

      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(typedOther.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, typedOther.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("count_args(");
      boolean first = true;

      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class count_argsStandardSchemeFactory implements SchemeFactory {
      public count_argsStandardScheme getScheme() {
        return new count_argsStandardScheme();
      }
    }

    private static class count_argsStandardScheme extends StandardScheme<count_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, count_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new CountCondition();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, count_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class count_argsTupleSchemeFactory implements SchemeFactory {
      public count_argsTupleScheme getScheme() {
        return new count_argsTupleScheme();
      }
    }

    private static class count_argsTupleScheme extends TupleScheme<count_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, count_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, count_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.condition = new CountCondition();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class count_result implements org.apache.thrift.TBase<count_result, count_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("count_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new count_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new count_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(count_result.class, metaDataMap);
    }

    public count_result() {
    }

    public count_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public count_result(count_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public count_result deepCopy() {
      return new count_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public count_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof count_result)
        return this.equals((count_result)that);
      return false;
    }

    public boolean equals(count_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(count_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      count_result typedOther = (count_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("count_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class count_resultStandardSchemeFactory implements SchemeFactory {
      public count_resultStandardScheme getScheme() {
        return new count_resultStandardScheme();
      }
    }

    private static class count_resultStandardScheme extends StandardScheme<count_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, count_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, count_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class count_resultTupleSchemeFactory implements SchemeFactory {
      public count_resultTupleScheme getScheme() {
        return new count_resultTupleScheme();
      }
    }

    private static class count_resultTupleScheme extends TupleScheme<count_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, count_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, count_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryAccessLog_args implements org.apache.thrift.TBase<queryAccessLog_args, queryAccessLog_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAccessLog_args");

    private static final org.apache.thrift.protocol.TField COMMON_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("commonCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAccessLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAccessLog_argsTupleSchemeFactory());
    }

    public CommonCondition commonCondition; // required
    public MainCondition condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_CONDITION((short)1, "commonCondition"),
      CONDITION((short)2, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_CONDITION
            return COMMON_CONDITION;
          case 2: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("commonCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonCondition.class)));
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MainCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAccessLog_args.class, metaDataMap);
    }

    public queryAccessLog_args() {
    }

    public queryAccessLog_args(
      CommonCondition commonCondition,
      MainCondition condition)
    {
      this();
      this.commonCondition = commonCondition;
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAccessLog_args(queryAccessLog_args other) {
      if (other.isSetCommonCondition()) {
        this.commonCondition = new CommonCondition(other.commonCondition);
      }
      if (other.isSetCondition()) {
        this.condition = new MainCondition(other.condition);
      }
    }

    public queryAccessLog_args deepCopy() {
      return new queryAccessLog_args(this);
    }

    @Override
    public void clear() {
      this.commonCondition = null;
      this.condition = null;
    }

    public CommonCondition getCommonCondition() {
      return this.commonCondition;
    }

    public queryAccessLog_args setCommonCondition(CommonCondition commonCondition) {
      this.commonCondition = commonCondition;
      return this;
    }

    public void unsetCommonCondition() {
      this.commonCondition = null;
    }

    /** Returns true if field commonCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonCondition() {
      return this.commonCondition != null;
    }

    public void setCommonConditionIsSet(boolean value) {
      if (!value) {
        this.commonCondition = null;
      }
    }

    public MainCondition getCondition() {
      return this.condition;
    }

    public queryAccessLog_args setCondition(MainCondition condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_CONDITION:
        if (value == null) {
          unsetCommonCondition();
        } else {
          setCommonCondition((CommonCondition)value);
        }
        break;

      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((MainCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_CONDITION:
        return getCommonCondition();

      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_CONDITION:
        return isSetCommonCondition();
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAccessLog_args)
        return this.equals((queryAccessLog_args)that);
      return false;
    }

    public boolean equals(queryAccessLog_args that) {
      if (that == null)
        return false;

      boolean this_present_commonCondition = true && this.isSetCommonCondition();
      boolean that_present_commonCondition = true && that.isSetCommonCondition();
      if (this_present_commonCondition || that_present_commonCondition) {
        if (!(this_present_commonCondition && that_present_commonCondition))
          return false;
        if (!this.commonCondition.equals(that.commonCondition))
          return false;
      }

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryAccessLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryAccessLog_args typedOther = (queryAccessLog_args)other;

      lastComparison = Boolean.valueOf(isSetCommonCondition()).compareTo(typedOther.isSetCommonCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonCondition, typedOther.commonCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(typedOther.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, typedOther.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAccessLog_args(");
      boolean first = true;

      sb.append("commonCondition:");
      if (this.commonCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.commonCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonCondition != null) {
        commonCondition.validate();
      }
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAccessLog_argsStandardSchemeFactory implements SchemeFactory {
      public queryAccessLog_argsStandardScheme getScheme() {
        return new queryAccessLog_argsStandardScheme();
      }
    }

    private static class queryAccessLog_argsStandardScheme extends StandardScheme<queryAccessLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAccessLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonCondition = new CommonCondition();
                struct.commonCondition.read(iprot);
                struct.setCommonConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new MainCondition();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAccessLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonCondition != null) {
          oprot.writeFieldBegin(COMMON_CONDITION_FIELD_DESC);
          struct.commonCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAccessLog_argsTupleSchemeFactory implements SchemeFactory {
      public queryAccessLog_argsTupleScheme getScheme() {
        return new queryAccessLog_argsTupleScheme();
      }
    }

    private static class queryAccessLog_argsTupleScheme extends TupleScheme<queryAccessLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAccessLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonCondition()) {
          optionals.set(0);
        }
        if (struct.isSetCondition()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCommonCondition()) {
          struct.commonCondition.write(oprot);
        }
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAccessLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.commonCondition = new CommonCondition();
          struct.commonCondition.read(iprot);
          struct.setCommonConditionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.condition = new MainCondition();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class queryAccessLog_result implements org.apache.thrift.TBase<queryAccessLog_result, queryAccessLog_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAccessLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAccessLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAccessLog_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAccessLog_result.class, metaDataMap);
    }

    public queryAccessLog_result() {
    }

    public queryAccessLog_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAccessLog_result(queryAccessLog_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public queryAccessLog_result deepCopy() {
      return new queryAccessLog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public queryAccessLog_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAccessLog_result)
        return this.equals((queryAccessLog_result)that);
      return false;
    }

    public boolean equals(queryAccessLog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryAccessLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryAccessLog_result typedOther = (queryAccessLog_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAccessLog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAccessLog_resultStandardSchemeFactory implements SchemeFactory {
      public queryAccessLog_resultStandardScheme getScheme() {
        return new queryAccessLog_resultStandardScheme();
      }
    }

    private static class queryAccessLog_resultStandardScheme extends StandardScheme<queryAccessLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAccessLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAccessLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAccessLog_resultTupleSchemeFactory implements SchemeFactory {
      public queryAccessLog_resultTupleScheme getScheme() {
        return new queryAccessLog_resultTupleScheme();
      }
    }

    private static class queryAccessLog_resultTupleScheme extends TupleScheme<queryAccessLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAccessLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAccessLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryMonitorLog_args implements org.apache.thrift.TBase<queryMonitorLog_args, queryMonitorLog_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonitorLog_args");

    private static final org.apache.thrift.protocol.TField COMMON_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("commonCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonitorLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonitorLog_argsTupleSchemeFactory());
    }

    public CommonCondition commonCondition; // required
    public MainCondition condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_CONDITION((short)1, "commonCondition"),
      CONDITION((short)2, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_CONDITION
            return COMMON_CONDITION;
          case 2: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("commonCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonCondition.class)));
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MainCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonitorLog_args.class, metaDataMap);
    }

    public queryMonitorLog_args() {
    }

    public queryMonitorLog_args(
      CommonCondition commonCondition,
      MainCondition condition)
    {
      this();
      this.commonCondition = commonCondition;
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonitorLog_args(queryMonitorLog_args other) {
      if (other.isSetCommonCondition()) {
        this.commonCondition = new CommonCondition(other.commonCondition);
      }
      if (other.isSetCondition()) {
        this.condition = new MainCondition(other.condition);
      }
    }

    public queryMonitorLog_args deepCopy() {
      return new queryMonitorLog_args(this);
    }

    @Override
    public void clear() {
      this.commonCondition = null;
      this.condition = null;
    }

    public CommonCondition getCommonCondition() {
      return this.commonCondition;
    }

    public queryMonitorLog_args setCommonCondition(CommonCondition commonCondition) {
      this.commonCondition = commonCondition;
      return this;
    }

    public void unsetCommonCondition() {
      this.commonCondition = null;
    }

    /** Returns true if field commonCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonCondition() {
      return this.commonCondition != null;
    }

    public void setCommonConditionIsSet(boolean value) {
      if (!value) {
        this.commonCondition = null;
      }
    }

    public MainCondition getCondition() {
      return this.condition;
    }

    public queryMonitorLog_args setCondition(MainCondition condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_CONDITION:
        if (value == null) {
          unsetCommonCondition();
        } else {
          setCommonCondition((CommonCondition)value);
        }
        break;

      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((MainCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_CONDITION:
        return getCommonCondition();

      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_CONDITION:
        return isSetCommonCondition();
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonitorLog_args)
        return this.equals((queryMonitorLog_args)that);
      return false;
    }

    public boolean equals(queryMonitorLog_args that) {
      if (that == null)
        return false;

      boolean this_present_commonCondition = true && this.isSetCommonCondition();
      boolean that_present_commonCondition = true && that.isSetCommonCondition();
      if (this_present_commonCondition || that_present_commonCondition) {
        if (!(this_present_commonCondition && that_present_commonCondition))
          return false;
        if (!this.commonCondition.equals(that.commonCondition))
          return false;
      }

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryMonitorLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryMonitorLog_args typedOther = (queryMonitorLog_args)other;

      lastComparison = Boolean.valueOf(isSetCommonCondition()).compareTo(typedOther.isSetCommonCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonCondition, typedOther.commonCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(typedOther.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, typedOther.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonitorLog_args(");
      boolean first = true;

      sb.append("commonCondition:");
      if (this.commonCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.commonCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonCondition != null) {
        commonCondition.validate();
      }
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonitorLog_argsStandardSchemeFactory implements SchemeFactory {
      public queryMonitorLog_argsStandardScheme getScheme() {
        return new queryMonitorLog_argsStandardScheme();
      }
    }

    private static class queryMonitorLog_argsStandardScheme extends StandardScheme<queryMonitorLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonitorLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonCondition = new CommonCondition();
                struct.commonCondition.read(iprot);
                struct.setCommonConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new MainCondition();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonitorLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonCondition != null) {
          oprot.writeFieldBegin(COMMON_CONDITION_FIELD_DESC);
          struct.commonCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonitorLog_argsTupleSchemeFactory implements SchemeFactory {
      public queryMonitorLog_argsTupleScheme getScheme() {
        return new queryMonitorLog_argsTupleScheme();
      }
    }

    private static class queryMonitorLog_argsTupleScheme extends TupleScheme<queryMonitorLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonitorLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonCondition()) {
          optionals.set(0);
        }
        if (struct.isSetCondition()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCommonCondition()) {
          struct.commonCondition.write(oprot);
        }
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonitorLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.commonCondition = new CommonCondition();
          struct.commonCondition.read(iprot);
          struct.setCommonConditionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.condition = new MainCondition();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class queryMonitorLog_result implements org.apache.thrift.TBase<queryMonitorLog_result, queryMonitorLog_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonitorLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonitorLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonitorLog_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonitorLog_result.class, metaDataMap);
    }

    public queryMonitorLog_result() {
    }

    public queryMonitorLog_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonitorLog_result(queryMonitorLog_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public queryMonitorLog_result deepCopy() {
      return new queryMonitorLog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public queryMonitorLog_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonitorLog_result)
        return this.equals((queryMonitorLog_result)that);
      return false;
    }

    public boolean equals(queryMonitorLog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryMonitorLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryMonitorLog_result typedOther = (queryMonitorLog_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonitorLog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonitorLog_resultStandardSchemeFactory implements SchemeFactory {
      public queryMonitorLog_resultStandardScheme getScheme() {
        return new queryMonitorLog_resultStandardScheme();
      }
    }

    private static class queryMonitorLog_resultStandardScheme extends StandardScheme<queryMonitorLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonitorLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonitorLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonitorLog_resultTupleSchemeFactory implements SchemeFactory {
      public queryMonitorLog_resultTupleScheme getScheme() {
        return new queryMonitorLog_resultTupleScheme();
      }
    }

    private static class queryMonitorLog_resultTupleScheme extends TupleScheme<queryMonitorLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonitorLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonitorLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryFilterLog_args implements org.apache.thrift.TBase<queryFilterLog_args, queryFilterLog_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFilterLog_args");

    private static final org.apache.thrift.protocol.TField COMMON_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("commonCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFilterLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFilterLog_argsTupleSchemeFactory());
    }

    public CommonCondition commonCondition; // required
    public MainCondition condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_CONDITION((short)1, "commonCondition"),
      CONDITION((short)2, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_CONDITION
            return COMMON_CONDITION;
          case 2: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("commonCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonCondition.class)));
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MainCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFilterLog_args.class, metaDataMap);
    }

    public queryFilterLog_args() {
    }

    public queryFilterLog_args(
      CommonCondition commonCondition,
      MainCondition condition)
    {
      this();
      this.commonCondition = commonCondition;
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFilterLog_args(queryFilterLog_args other) {
      if (other.isSetCommonCondition()) {
        this.commonCondition = new CommonCondition(other.commonCondition);
      }
      if (other.isSetCondition()) {
        this.condition = new MainCondition(other.condition);
      }
    }

    public queryFilterLog_args deepCopy() {
      return new queryFilterLog_args(this);
    }

    @Override
    public void clear() {
      this.commonCondition = null;
      this.condition = null;
    }

    public CommonCondition getCommonCondition() {
      return this.commonCondition;
    }

    public queryFilterLog_args setCommonCondition(CommonCondition commonCondition) {
      this.commonCondition = commonCondition;
      return this;
    }

    public void unsetCommonCondition() {
      this.commonCondition = null;
    }

    /** Returns true if field commonCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonCondition() {
      return this.commonCondition != null;
    }

    public void setCommonConditionIsSet(boolean value) {
      if (!value) {
        this.commonCondition = null;
      }
    }

    public MainCondition getCondition() {
      return this.condition;
    }

    public queryFilterLog_args setCondition(MainCondition condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_CONDITION:
        if (value == null) {
          unsetCommonCondition();
        } else {
          setCommonCondition((CommonCondition)value);
        }
        break;

      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((MainCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_CONDITION:
        return getCommonCondition();

      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_CONDITION:
        return isSetCommonCondition();
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFilterLog_args)
        return this.equals((queryFilterLog_args)that);
      return false;
    }

    public boolean equals(queryFilterLog_args that) {
      if (that == null)
        return false;

      boolean this_present_commonCondition = true && this.isSetCommonCondition();
      boolean that_present_commonCondition = true && that.isSetCommonCondition();
      if (this_present_commonCondition || that_present_commonCondition) {
        if (!(this_present_commonCondition && that_present_commonCondition))
          return false;
        if (!this.commonCondition.equals(that.commonCondition))
          return false;
      }

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryFilterLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryFilterLog_args typedOther = (queryFilterLog_args)other;

      lastComparison = Boolean.valueOf(isSetCommonCondition()).compareTo(typedOther.isSetCommonCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonCondition, typedOther.commonCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(typedOther.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, typedOther.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFilterLog_args(");
      boolean first = true;

      sb.append("commonCondition:");
      if (this.commonCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.commonCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonCondition != null) {
        commonCondition.validate();
      }
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFilterLog_argsStandardSchemeFactory implements SchemeFactory {
      public queryFilterLog_argsStandardScheme getScheme() {
        return new queryFilterLog_argsStandardScheme();
      }
    }

    private static class queryFilterLog_argsStandardScheme extends StandardScheme<queryFilterLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFilterLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonCondition = new CommonCondition();
                struct.commonCondition.read(iprot);
                struct.setCommonConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new MainCondition();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFilterLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonCondition != null) {
          oprot.writeFieldBegin(COMMON_CONDITION_FIELD_DESC);
          struct.commonCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFilterLog_argsTupleSchemeFactory implements SchemeFactory {
      public queryFilterLog_argsTupleScheme getScheme() {
        return new queryFilterLog_argsTupleScheme();
      }
    }

    private static class queryFilterLog_argsTupleScheme extends TupleScheme<queryFilterLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFilterLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonCondition()) {
          optionals.set(0);
        }
        if (struct.isSetCondition()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCommonCondition()) {
          struct.commonCondition.write(oprot);
        }
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFilterLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.commonCondition = new CommonCondition();
          struct.commonCondition.read(iprot);
          struct.setCommonConditionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.condition = new MainCondition();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class queryFilterLog_result implements org.apache.thrift.TBase<queryFilterLog_result, queryFilterLog_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFilterLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFilterLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFilterLog_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFilterLog_result.class, metaDataMap);
    }

    public queryFilterLog_result() {
    }

    public queryFilterLog_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFilterLog_result(queryFilterLog_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public queryFilterLog_result deepCopy() {
      return new queryFilterLog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public queryFilterLog_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFilterLog_result)
        return this.equals((queryFilterLog_result)that);
      return false;
    }

    public boolean equals(queryFilterLog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryFilterLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryFilterLog_result typedOther = (queryFilterLog_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFilterLog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFilterLog_resultStandardSchemeFactory implements SchemeFactory {
      public queryFilterLog_resultStandardScheme getScheme() {
        return new queryFilterLog_resultStandardScheme();
      }
    }

    private static class queryFilterLog_resultStandardScheme extends StandardScheme<queryFilterLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFilterLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFilterLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFilterLog_resultTupleSchemeFactory implements SchemeFactory {
      public queryFilterLog_resultTupleScheme getScheme() {
        return new queryFilterLog_resultTupleScheme();
      }
    }

    private static class queryFilterLog_resultTupleScheme extends TupleScheme<queryFilterLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFilterLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFilterLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryMonitorIpInfo_args implements org.apache.thrift.TBase<queryMonitorIpInfo_args, queryMonitorIpInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonitorIpInfo_args");

    private static final org.apache.thrift.protocol.TField COMMON_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("commonCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonitorIpInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonitorIpInfo_argsTupleSchemeFactory());
    }

    public CommonCondition commonCondition; // required
    public MainCondition condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_CONDITION((short)1, "commonCondition"),
      CONDITION((short)2, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_CONDITION
            return COMMON_CONDITION;
          case 2: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("commonCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonCondition.class)));
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MainCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonitorIpInfo_args.class, metaDataMap);
    }

    public queryMonitorIpInfo_args() {
    }

    public queryMonitorIpInfo_args(
      CommonCondition commonCondition,
      MainCondition condition)
    {
      this();
      this.commonCondition = commonCondition;
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonitorIpInfo_args(queryMonitorIpInfo_args other) {
      if (other.isSetCommonCondition()) {
        this.commonCondition = new CommonCondition(other.commonCondition);
      }
      if (other.isSetCondition()) {
        this.condition = new MainCondition(other.condition);
      }
    }

    public queryMonitorIpInfo_args deepCopy() {
      return new queryMonitorIpInfo_args(this);
    }

    @Override
    public void clear() {
      this.commonCondition = null;
      this.condition = null;
    }

    public CommonCondition getCommonCondition() {
      return this.commonCondition;
    }

    public queryMonitorIpInfo_args setCommonCondition(CommonCondition commonCondition) {
      this.commonCondition = commonCondition;
      return this;
    }

    public void unsetCommonCondition() {
      this.commonCondition = null;
    }

    /** Returns true if field commonCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonCondition() {
      return this.commonCondition != null;
    }

    public void setCommonConditionIsSet(boolean value) {
      if (!value) {
        this.commonCondition = null;
      }
    }

    public MainCondition getCondition() {
      return this.condition;
    }

    public queryMonitorIpInfo_args setCondition(MainCondition condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_CONDITION:
        if (value == null) {
          unsetCommonCondition();
        } else {
          setCommonCondition((CommonCondition)value);
        }
        break;

      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((MainCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_CONDITION:
        return getCommonCondition();

      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_CONDITION:
        return isSetCommonCondition();
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonitorIpInfo_args)
        return this.equals((queryMonitorIpInfo_args)that);
      return false;
    }

    public boolean equals(queryMonitorIpInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_commonCondition = true && this.isSetCommonCondition();
      boolean that_present_commonCondition = true && that.isSetCommonCondition();
      if (this_present_commonCondition || that_present_commonCondition) {
        if (!(this_present_commonCondition && that_present_commonCondition))
          return false;
        if (!this.commonCondition.equals(that.commonCondition))
          return false;
      }

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryMonitorIpInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryMonitorIpInfo_args typedOther = (queryMonitorIpInfo_args)other;

      lastComparison = Boolean.valueOf(isSetCommonCondition()).compareTo(typedOther.isSetCommonCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonCondition, typedOther.commonCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(typedOther.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, typedOther.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonitorIpInfo_args(");
      boolean first = true;

      sb.append("commonCondition:");
      if (this.commonCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.commonCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonCondition != null) {
        commonCondition.validate();
      }
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonitorIpInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryMonitorIpInfo_argsStandardScheme getScheme() {
        return new queryMonitorIpInfo_argsStandardScheme();
      }
    }

    private static class queryMonitorIpInfo_argsStandardScheme extends StandardScheme<queryMonitorIpInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonitorIpInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonCondition = new CommonCondition();
                struct.commonCondition.read(iprot);
                struct.setCommonConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new MainCondition();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonitorIpInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonCondition != null) {
          oprot.writeFieldBegin(COMMON_CONDITION_FIELD_DESC);
          struct.commonCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonitorIpInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryMonitorIpInfo_argsTupleScheme getScheme() {
        return new queryMonitorIpInfo_argsTupleScheme();
      }
    }

    private static class queryMonitorIpInfo_argsTupleScheme extends TupleScheme<queryMonitorIpInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonitorIpInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonCondition()) {
          optionals.set(0);
        }
        if (struct.isSetCondition()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCommonCondition()) {
          struct.commonCondition.write(oprot);
        }
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonitorIpInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.commonCondition = new CommonCondition();
          struct.commonCondition.read(iprot);
          struct.setCommonConditionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.condition = new MainCondition();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class queryMonitorIpInfo_result implements org.apache.thrift.TBase<queryMonitorIpInfo_result, queryMonitorIpInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonitorIpInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonitorIpInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonitorIpInfo_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonitorIpInfo_result.class, metaDataMap);
    }

    public queryMonitorIpInfo_result() {
    }

    public queryMonitorIpInfo_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonitorIpInfo_result(queryMonitorIpInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public queryMonitorIpInfo_result deepCopy() {
      return new queryMonitorIpInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public queryMonitorIpInfo_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonitorIpInfo_result)
        return this.equals((queryMonitorIpInfo_result)that);
      return false;
    }

    public boolean equals(queryMonitorIpInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryMonitorIpInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryMonitorIpInfo_result typedOther = (queryMonitorIpInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonitorIpInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonitorIpInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryMonitorIpInfo_resultStandardScheme getScheme() {
        return new queryMonitorIpInfo_resultStandardScheme();
      }
    }

    private static class queryMonitorIpInfo_resultStandardScheme extends StandardScheme<queryMonitorIpInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonitorIpInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonitorIpInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonitorIpInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryMonitorIpInfo_resultTupleScheme getScheme() {
        return new queryMonitorIpInfo_resultTupleScheme();
      }
    }

    private static class queryMonitorIpInfo_resultTupleScheme extends TupleScheme<queryMonitorIpInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonitorIpInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonitorIpInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryIllegalInfo_args implements org.apache.thrift.TBase<queryIllegalInfo_args, queryIllegalInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIllegalInfo_args");

    private static final org.apache.thrift.protocol.TField COMMON_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("commonCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIllegalInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIllegalInfo_argsTupleSchemeFactory());
    }

    public CommonCondition commonCondition; // required
    public MainCondition condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_CONDITION((short)1, "commonCondition"),
      CONDITION((short)2, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_CONDITION
            return COMMON_CONDITION;
          case 2: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("commonCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonCondition.class)));
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MainCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIllegalInfo_args.class, metaDataMap);
    }

    public queryIllegalInfo_args() {
    }

    public queryIllegalInfo_args(
      CommonCondition commonCondition,
      MainCondition condition)
    {
      this();
      this.commonCondition = commonCondition;
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIllegalInfo_args(queryIllegalInfo_args other) {
      if (other.isSetCommonCondition()) {
        this.commonCondition = new CommonCondition(other.commonCondition);
      }
      if (other.isSetCondition()) {
        this.condition = new MainCondition(other.condition);
      }
    }

    public queryIllegalInfo_args deepCopy() {
      return new queryIllegalInfo_args(this);
    }

    @Override
    public void clear() {
      this.commonCondition = null;
      this.condition = null;
    }

    public CommonCondition getCommonCondition() {
      return this.commonCondition;
    }

    public queryIllegalInfo_args setCommonCondition(CommonCondition commonCondition) {
      this.commonCondition = commonCondition;
      return this;
    }

    public void unsetCommonCondition() {
      this.commonCondition = null;
    }

    /** Returns true if field commonCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonCondition() {
      return this.commonCondition != null;
    }

    public void setCommonConditionIsSet(boolean value) {
      if (!value) {
        this.commonCondition = null;
      }
    }

    public MainCondition getCondition() {
      return this.condition;
    }

    public queryIllegalInfo_args setCondition(MainCondition condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_CONDITION:
        if (value == null) {
          unsetCommonCondition();
        } else {
          setCommonCondition((CommonCondition)value);
        }
        break;

      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((MainCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_CONDITION:
        return getCommonCondition();

      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_CONDITION:
        return isSetCommonCondition();
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIllegalInfo_args)
        return this.equals((queryIllegalInfo_args)that);
      return false;
    }

    public boolean equals(queryIllegalInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_commonCondition = true && this.isSetCommonCondition();
      boolean that_present_commonCondition = true && that.isSetCommonCondition();
      if (this_present_commonCondition || that_present_commonCondition) {
        if (!(this_present_commonCondition && that_present_commonCondition))
          return false;
        if (!this.commonCondition.equals(that.commonCondition))
          return false;
      }

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryIllegalInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryIllegalInfo_args typedOther = (queryIllegalInfo_args)other;

      lastComparison = Boolean.valueOf(isSetCommonCondition()).compareTo(typedOther.isSetCommonCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonCondition, typedOther.commonCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(typedOther.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, typedOther.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIllegalInfo_args(");
      boolean first = true;

      sb.append("commonCondition:");
      if (this.commonCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.commonCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonCondition != null) {
        commonCondition.validate();
      }
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIllegalInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryIllegalInfo_argsStandardScheme getScheme() {
        return new queryIllegalInfo_argsStandardScheme();
      }
    }

    private static class queryIllegalInfo_argsStandardScheme extends StandardScheme<queryIllegalInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIllegalInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonCondition = new CommonCondition();
                struct.commonCondition.read(iprot);
                struct.setCommonConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new MainCondition();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIllegalInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonCondition != null) {
          oprot.writeFieldBegin(COMMON_CONDITION_FIELD_DESC);
          struct.commonCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIllegalInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryIllegalInfo_argsTupleScheme getScheme() {
        return new queryIllegalInfo_argsTupleScheme();
      }
    }

    private static class queryIllegalInfo_argsTupleScheme extends TupleScheme<queryIllegalInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIllegalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonCondition()) {
          optionals.set(0);
        }
        if (struct.isSetCondition()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCommonCondition()) {
          struct.commonCondition.write(oprot);
        }
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIllegalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.commonCondition = new CommonCondition();
          struct.commonCondition.read(iprot);
          struct.setCommonConditionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.condition = new MainCondition();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class queryIllegalInfo_result implements org.apache.thrift.TBase<queryIllegalInfo_result, queryIllegalInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIllegalInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIllegalInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIllegalInfo_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIllegalInfo_result.class, metaDataMap);
    }

    public queryIllegalInfo_result() {
    }

    public queryIllegalInfo_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIllegalInfo_result(queryIllegalInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public queryIllegalInfo_result deepCopy() {
      return new queryIllegalInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public queryIllegalInfo_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIllegalInfo_result)
        return this.equals((queryIllegalInfo_result)that);
      return false;
    }

    public boolean equals(queryIllegalInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryIllegalInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryIllegalInfo_result typedOther = (queryIllegalInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIllegalInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIllegalInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryIllegalInfo_resultStandardScheme getScheme() {
        return new queryIllegalInfo_resultStandardScheme();
      }
    }

    private static class queryIllegalInfo_resultStandardScheme extends StandardScheme<queryIllegalInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIllegalInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIllegalInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIllegalInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryIllegalInfo_resultTupleScheme getScheme() {
        return new queryIllegalInfo_resultTupleScheme();
      }
    }

    private static class queryIllegalInfo_resultTupleScheme extends TupleScheme<queryIllegalInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIllegalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIllegalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
