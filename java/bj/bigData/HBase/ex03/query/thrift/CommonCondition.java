/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package bj.bigData.HBase.ex03.query.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class CommonCondition implements org.apache.thrift.TBase< CommonCondition, CommonCondition._Fields >, java.io.Serializable, Cloneable {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "CommonCondition" );

	private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC   = new org.apache.thrift.protocol.TField( "pageNo", org.apache.thrift.protocol.TType.I32, ( short ) 1 );
	private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField( "pageSize", org.apache.thrift.protocol.TType.I32, ( short ) 2 );
	private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC   = new org.apache.thrift.protocol.TField( "timeout", org.apache.thrift.protocol.TType.I32, ( short ) 3 );

	private static final Map< Class< ? extends IScheme >, SchemeFactory > schemes = new HashMap< Class< ? extends IScheme >, SchemeFactory >();

	static {
		schemes.put( StandardScheme.class, new CommonConditionStandardSchemeFactory() );
		schemes.put( TupleScheme.class, new CommonConditionTupleSchemeFactory() );
	}

	public int pageNo; // required
	public int pageSize; // required
	public int timeout; // required

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		PAGE_NO( ( short ) 1, "pageNo" ),
		PAGE_SIZE( ( short ) 2, "pageSize" ),
		TIMEOUT( ( short ) 3, "timeout" );

		private static final Map< String, _Fields > byName = new HashMap< String, _Fields >();

		static {
			for ( _Fields field : EnumSet.allOf( _Fields.class ) ) {
				byName.put( field.getFieldName(), field );
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId( int fieldId ) {

			switch ( fieldId ) {
				case 1: // PAGE_NO
					return PAGE_NO;
				case 2: // PAGE_SIZE
					return PAGE_SIZE;
				case 3: // TIMEOUT
					return TIMEOUT;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow( int fieldId ) {

			_Fields fields = findByThriftId( fieldId );
			if ( fields == null ) {
				throw new IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
			}
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName( String name ) {

			return byName.get( name );
		}

		private final short  _thriftId;
		private final String _fieldName;

		_Fields( short thriftId, String fieldName ) {

			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {

			return _thriftId;
		}

		public String getFieldName() {

			return _fieldName;
		}
	}

	// isset id assignments
	private static final int  __PAGENO_ISSET_ID   = 0;
	private static final int  __PAGESIZE_ISSET_ID = 1;
	private static final int  __TIMEOUT_ISSET_ID  = 2;
	private              byte __isset_bitfield    = 0;
	public static final Map< _Fields, org.apache.thrift.meta_data.FieldMetaData > metaDataMap;

	static {
		Map< _Fields, org.apache.thrift.meta_data.FieldMetaData > tmpMap = new EnumMap< _Fields, org.apache.thrift.meta_data.FieldMetaData >( _Fields.class );
		tmpMap.put( _Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData( "pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
		tmpMap.put( _Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData( "pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
		tmpMap.put( _Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData( "timeout", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
		metaDataMap = Collections.unmodifiableMap( tmpMap );
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( CommonCondition.class, metaDataMap );
	}

	public CommonCondition() {

	}

	public CommonCondition(
			int pageNo,
			int pageSize,
			int timeout ) {

		this();
		this.pageNo = pageNo;
		setPageNoIsSet( true );
		this.pageSize = pageSize;
		setPageSizeIsSet( true );
		this.timeout = timeout;
		setTimeoutIsSet( true );
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public CommonCondition( CommonCondition other ) {

		__isset_bitfield = other.__isset_bitfield;
		this.pageNo = other.pageNo;
		this.pageSize = other.pageSize;
		this.timeout = other.timeout;
	}

	public CommonCondition deepCopy() {

		return new CommonCondition( this );
	}

	@Override
	public void clear() {

		setPageNoIsSet( false );
		this.pageNo = 0;
		setPageSizeIsSet( false );
		this.pageSize = 0;
		setTimeoutIsSet( false );
		this.timeout = 0;
	}

	public int getPageNo() {

		return this.pageNo;
	}

	public CommonCondition setPageNo( int pageNo ) {

		this.pageNo = pageNo;
		setPageNoIsSet( true );
		return this;
	}

	public void unsetPageNo() {

		__isset_bitfield = EncodingUtils.clearBit( __isset_bitfield, __PAGENO_ISSET_ID );
	}

	/** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
	public boolean isSetPageNo() {

		return EncodingUtils.testBit( __isset_bitfield, __PAGENO_ISSET_ID );
	}

	public void setPageNoIsSet( boolean value ) {

		__isset_bitfield = EncodingUtils.setBit( __isset_bitfield, __PAGENO_ISSET_ID, value );
	}

	public int getPageSize() {

		return this.pageSize;
	}

	public CommonCondition setPageSize( int pageSize ) {

		this.pageSize = pageSize;
		setPageSizeIsSet( true );
		return this;
	}

	public void unsetPageSize() {

		__isset_bitfield = EncodingUtils.clearBit( __isset_bitfield, __PAGESIZE_ISSET_ID );
	}

	/** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
	public boolean isSetPageSize() {

		return EncodingUtils.testBit( __isset_bitfield, __PAGESIZE_ISSET_ID );
	}

	public void setPageSizeIsSet( boolean value ) {

		__isset_bitfield = EncodingUtils.setBit( __isset_bitfield, __PAGESIZE_ISSET_ID, value );
	}

	public int getTimeout() {

		return this.timeout;
	}

	public CommonCondition setTimeout( int timeout ) {

		this.timeout = timeout;
		setTimeoutIsSet( true );
		return this;
	}

	public void unsetTimeout() {

		__isset_bitfield = EncodingUtils.clearBit( __isset_bitfield, __TIMEOUT_ISSET_ID );
	}

	/** Returns true if field timeout is set (has been assigned a value) and false otherwise */
	public boolean isSetTimeout() {

		return EncodingUtils.testBit( __isset_bitfield, __TIMEOUT_ISSET_ID );
	}

	public void setTimeoutIsSet( boolean value ) {

		__isset_bitfield = EncodingUtils.setBit( __isset_bitfield, __TIMEOUT_ISSET_ID, value );
	}

	public void setFieldValue( _Fields field, Object value ) {

		switch ( field ) {
			case PAGE_NO:
				if ( value == null ) {
					unsetPageNo();
				} else {
					setPageNo( ( Integer ) value );
				}
				break;

			case PAGE_SIZE:
				if ( value == null ) {
					unsetPageSize();
				} else {
					setPageSize( ( Integer ) value );
				}
				break;

			case TIMEOUT:
				if ( value == null ) {
					unsetTimeout();
				} else {
					setTimeout( ( Integer ) value );
				}
				break;

		}
	}

	public Object getFieldValue( _Fields field ) {

		switch ( field ) {
			case PAGE_NO:
				return Integer.valueOf( getPageNo() );

			case PAGE_SIZE:
				return Integer.valueOf( getPageSize() );

			case TIMEOUT:
				return Integer.valueOf( getTimeout() );

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet( _Fields field ) {

		if ( field == null ) {
			throw new IllegalArgumentException();
		}

		switch ( field ) {
			case PAGE_NO:
				return isSetPageNo();
			case PAGE_SIZE:
				return isSetPageSize();
			case TIMEOUT:
				return isSetTimeout();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals( Object that ) {

		if ( that == null ) {
			return false;
		}
		if ( that instanceof CommonCondition ) {
			return this.equals( ( CommonCondition ) that );
		}
		return false;
	}

	public boolean equals( CommonCondition that ) {

		if ( that == null ) {
			return false;
		}

		boolean this_present_pageNo = true;
		boolean that_present_pageNo = true;
		if ( this_present_pageNo || that_present_pageNo ) {
			if ( !( this_present_pageNo && that_present_pageNo ) ) {
				return false;
			}
			if ( this.pageNo != that.pageNo ) {
				return false;
			}
		}

		boolean this_present_pageSize = true;
		boolean that_present_pageSize = true;
		if ( this_present_pageSize || that_present_pageSize ) {
			if ( !( this_present_pageSize && that_present_pageSize ) ) {
				return false;
			}
			if ( this.pageSize != that.pageSize ) {
				return false;
			}
		}

		boolean this_present_timeout = true;
		boolean that_present_timeout = true;
		if ( this_present_timeout || that_present_timeout ) {
			if ( !( this_present_timeout && that_present_timeout ) ) {
				return false;
			}
			if ( this.timeout != that.timeout ) {
				return false;
			}
		}

		return true;
	}

	@Override
	public int hashCode() {

		return 0;
	}

	public int compareTo( CommonCondition other ) {

		if ( !getClass().equals( other.getClass() ) ) {
			return getClass().getName().compareTo( other.getClass().getName() );
		}

		int             lastComparison = 0;
		CommonCondition typedOther     = ( CommonCondition ) other;

		lastComparison = Boolean.valueOf( isSetPageNo() ).compareTo( typedOther.isSetPageNo() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetPageNo() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.pageNo, typedOther.pageNo );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf( isSetPageSize() ).compareTo( typedOther.isSetPageSize() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetPageSize() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.pageSize, typedOther.pageSize );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf( isSetTimeout() ).compareTo( typedOther.isSetTimeout() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetTimeout() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.timeout, typedOther.timeout );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId( int fieldId ) {

		return _Fields.findByThriftId( fieldId );
	}

	public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {

		schemes.get( iprot.getScheme() ).getScheme().read( iprot, this );
	}

	public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {

		schemes.get( oprot.getScheme() ).getScheme().write( oprot, this );
	}

	@Override
	public String toString() {

		StringBuilder sb    = new StringBuilder( "CommonCondition(" );
		boolean       first = true;

		sb.append( "pageNo:" );
		sb.append( this.pageNo );
		first = false;
		if ( !first ) {
			sb.append( ", " );
		}
		sb.append( "pageSize:" );
		sb.append( this.pageSize );
		first = false;
		if ( !first ) {
			sb.append( ", " );
		}
		sb.append( "timeout:" );
		sb.append( this.timeout );
		first = false;
		sb.append( ")" );
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {

		try {
			write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
		} catch ( org.apache.thrift.TException te ) {
			throw new java.io.IOException( te );
		}
	}

	private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, ClassNotFoundException {

		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
		} catch ( org.apache.thrift.TException te ) {
			throw new java.io.IOException( te );
		}
	}

	private static class CommonConditionStandardSchemeFactory implements SchemeFactory {

		public CommonConditionStandardScheme getScheme() {

			return new CommonConditionStandardScheme();
		}
	}

	private static class CommonConditionStandardScheme extends StandardScheme< CommonCondition > {

		public void read( org.apache.thrift.protocol.TProtocol iprot, CommonCondition struct ) throws org.apache.thrift.TException {

			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while ( true ) {
				schemeField = iprot.readFieldBegin();
				if ( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
					break;
				}
				switch ( schemeField.id ) {
					case 1: // PAGE_NO
						if ( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
							struct.pageNo = iprot.readI32();
							struct.setPageNoIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					case 2: // PAGE_SIZE
						if ( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
							struct.pageSize = iprot.readI32();
							struct.setPageSizeIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					case 3: // TIMEOUT
						if ( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
							struct.timeout = iprot.readI32();
							struct.setTimeoutIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot, CommonCondition struct ) throws org.apache.thrift.TException {

			struct.validate();

			oprot.writeStructBegin( STRUCT_DESC );
			oprot.writeFieldBegin( PAGE_NO_FIELD_DESC );
			oprot.writeI32( struct.pageNo );
			oprot.writeFieldEnd();
			oprot.writeFieldBegin( PAGE_SIZE_FIELD_DESC );
			oprot.writeI32( struct.pageSize );
			oprot.writeFieldEnd();
			oprot.writeFieldBegin( TIMEOUT_FIELD_DESC );
			oprot.writeI32( struct.timeout );
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class CommonConditionTupleSchemeFactory implements SchemeFactory {

		public CommonConditionTupleScheme getScheme() {

			return new CommonConditionTupleScheme();
		}
	}

	private static class CommonConditionTupleScheme extends TupleScheme< CommonCondition > {

		@Override
		public void write( org.apache.thrift.protocol.TProtocol prot, CommonCondition struct ) throws org.apache.thrift.TException {

			TTupleProtocol oprot     = ( TTupleProtocol ) prot;
			BitSet         optionals = new BitSet();
			if ( struct.isSetPageNo() ) {
				optionals.set( 0 );
			}
			if ( struct.isSetPageSize() ) {
				optionals.set( 1 );
			}
			if ( struct.isSetTimeout() ) {
				optionals.set( 2 );
			}
			oprot.writeBitSet( optionals, 3 );
			if ( struct.isSetPageNo() ) {
				oprot.writeI32( struct.pageNo );
			}
			if ( struct.isSetPageSize() ) {
				oprot.writeI32( struct.pageSize );
			}
			if ( struct.isSetTimeout() ) {
				oprot.writeI32( struct.timeout );
			}
		}

		@Override
		public void read( org.apache.thrift.protocol.TProtocol prot, CommonCondition struct ) throws org.apache.thrift.TException {

			TTupleProtocol iprot    = ( TTupleProtocol ) prot;
			BitSet         incoming = iprot.readBitSet( 3 );
			if ( incoming.get( 0 ) ) {
				struct.pageNo = iprot.readI32();
				struct.setPageNoIsSet( true );
			}
			if ( incoming.get( 1 ) ) {
				struct.pageSize = iprot.readI32();
				struct.setPageSizeIsSet( true );
			}
			if ( incoming.get( 2 ) ) {
				struct.timeout = iprot.readI32();
				struct.setTimeoutIsSet( true );
			}
		}
	}

}

