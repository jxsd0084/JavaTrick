/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package bj.bigData.HBase.ex03.query.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class ResultData implements org.apache.thrift.TBase< ResultData, ResultData._Fields >, java.io.Serializable, Cloneable {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "ResultData" );

	private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC    = new org.apache.thrift.protocol.TField( "count", org.apache.thrift.protocol.TType.I32, ( short ) 1 );
	private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField( "metadata", org.apache.thrift.protocol.TType.LIST, ( short ) 2 );
	private static final org.apache.thrift.protocol.TField DATAS_FIELD_DESC    = new org.apache.thrift.protocol.TField( "datas", org.apache.thrift.protocol.TType.LIST, ( short ) 3 );

	private static final Map< Class< ? extends IScheme >, SchemeFactory > schemes = new HashMap< Class< ? extends IScheme >, SchemeFactory >();

	static {
		schemes.put( StandardScheme.class, new ResultDataStandardSchemeFactory() );
		schemes.put( TupleScheme.class, new ResultDataTupleSchemeFactory() );
	}

	public int                    count; // required
	public List< String >         metadata; // required
	public List< List< String > > datas; // required

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		COUNT( ( short ) 1, "count" ),
		METADATA( ( short ) 2, "metadata" ),
		DATAS( ( short ) 3, "datas" );

		private static final Map< String, _Fields > byName = new HashMap< String, _Fields >();

		static {
			for ( _Fields field : EnumSet.allOf( _Fields.class ) ) {
				byName.put( field.getFieldName(), field );
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId( int fieldId ) {

			switch ( fieldId ) {
				case 1: // COUNT
					return COUNT;
				case 2: // METADATA
					return METADATA;
				case 3: // DATAS
					return DATAS;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow( int fieldId ) {

			_Fields fields = findByThriftId( fieldId );
			if ( fields == null ) {
				throw new IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
			}
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName( String name ) {

			return byName.get( name );
		}

		private final short  _thriftId;
		private final String _fieldName;

		_Fields( short thriftId, String fieldName ) {

			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {

			return _thriftId;
		}

		public String getFieldName() {

			return _fieldName;
		}
	}

	// isset id assignments
	private static final int  __COUNT_ISSET_ID = 0;
	private              byte __isset_bitfield = 0;
	public static final Map< _Fields, org.apache.thrift.meta_data.FieldMetaData > metaDataMap;

	static {
		Map< _Fields, org.apache.thrift.meta_data.FieldMetaData > tmpMap = new EnumMap< _Fields, org.apache.thrift.meta_data.FieldMetaData >( _Fields.class );
		tmpMap.put( _Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData( "count", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
		tmpMap.put( _Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData( "metadata", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData( org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) ) );
		tmpMap.put( _Fields.DATAS, new org.apache.thrift.meta_data.FieldMetaData( "datas", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData( org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.ListMetaData( org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) ) ) );
		metaDataMap = Collections.unmodifiableMap( tmpMap );
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( ResultData.class, metaDataMap );
	}

	public ResultData() {

	}

	public ResultData(
			int count,
			List< String > metadata,
			List< List< String > > datas ) {

		this();
		this.count = count;
		setCountIsSet( true );
		this.metadata = metadata;
		this.datas = datas;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ResultData( ResultData other ) {

		__isset_bitfield = other.__isset_bitfield;
		this.count = other.count;
		if ( other.isSetMetadata() ) {
			List< String > __this__metadata = new ArrayList< String >();
			for ( String other_element : other.metadata ) {
				__this__metadata.add( other_element );
			}
			this.metadata = __this__metadata;
		}
		if ( other.isSetDatas() ) {
			List< List< String > > __this__datas = new ArrayList< List< String > >();
			for ( List< String > other_element : other.datas ) {
				List< String > __this__datas_copy = new ArrayList< String >();
				for ( String other_element_element : other_element ) {
					__this__datas_copy.add( other_element_element );
				}
				__this__datas.add( __this__datas_copy );
			}
			this.datas = __this__datas;
		}
	}

	public ResultData deepCopy() {

		return new ResultData( this );
	}

	@Override
	public void clear() {

		setCountIsSet( false );
		this.count = 0;
		this.metadata = null;
		this.datas = null;
	}

	public int getCount() {

		return this.count;
	}

	public ResultData setCount( int count ) {

		this.count = count;
		setCountIsSet( true );
		return this;
	}

	public void unsetCount() {

		__isset_bitfield = EncodingUtils.clearBit( __isset_bitfield, __COUNT_ISSET_ID );
	}

	/** Returns true if field count is set (has been assigned a value) and false otherwise */
	public boolean isSetCount() {

		return EncodingUtils.testBit( __isset_bitfield, __COUNT_ISSET_ID );
	}

	public void setCountIsSet( boolean value ) {

		__isset_bitfield = EncodingUtils.setBit( __isset_bitfield, __COUNT_ISSET_ID, value );
	}

	public int getMetadataSize() {

		return ( this.metadata == null ) ? 0 : this.metadata.size();
	}

	public java.util.Iterator< String > getMetadataIterator() {

		return ( this.metadata == null ) ? null : this.metadata.iterator();
	}

	public void addToMetadata( String elem ) {

		if ( this.metadata == null ) {
			this.metadata = new ArrayList< String >();
		}
		this.metadata.add( elem );
	}

	public List< String > getMetadata() {

		return this.metadata;
	}

	public ResultData setMetadata( List< String > metadata ) {

		this.metadata = metadata;
		return this;
	}

	public void unsetMetadata() {

		this.metadata = null;
	}

	/** Returns true if field metadata is set (has been assigned a value) and false otherwise */
	public boolean isSetMetadata() {

		return this.metadata != null;
	}

	public void setMetadataIsSet( boolean value ) {

		if ( !value ) {
			this.metadata = null;
		}
	}

	public int getDatasSize() {

		return ( this.datas == null ) ? 0 : this.datas.size();
	}

	public java.util.Iterator< List< String > > getDatasIterator() {

		return ( this.datas == null ) ? null : this.datas.iterator();
	}

	public void addToDatas( List< String > elem ) {

		if ( this.datas == null ) {
			this.datas = new ArrayList< List< String > >();
		}
		this.datas.add( elem );
	}

	public List< List< String > > getDatas() {

		return this.datas;
	}

	public ResultData setDatas( List< List< String > > datas ) {

		this.datas = datas;
		return this;
	}

	public void unsetDatas() {

		this.datas = null;
	}

	/** Returns true if field datas is set (has been assigned a value) and false otherwise */
	public boolean isSetDatas() {

		return this.datas != null;
	}

	public void setDatasIsSet( boolean value ) {

		if ( !value ) {
			this.datas = null;
		}
	}

	public void setFieldValue( _Fields field, Object value ) {

		switch ( field ) {
			case COUNT:
				if ( value == null ) {
					unsetCount();
				} else {
					setCount( ( Integer ) value );
				}
				break;

			case METADATA:
				if ( value == null ) {
					unsetMetadata();
				} else {
					setMetadata( ( List< String > ) value );
				}
				break;

			case DATAS:
				if ( value == null ) {
					unsetDatas();
				} else {
					setDatas( ( List< List< String > > ) value );
				}
				break;

		}
	}

	public Object getFieldValue( _Fields field ) {

		switch ( field ) {
			case COUNT:
				return Integer.valueOf( getCount() );

			case METADATA:
				return getMetadata();

			case DATAS:
				return getDatas();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet( _Fields field ) {

		if ( field == null ) {
			throw new IllegalArgumentException();
		}

		switch ( field ) {
			case COUNT:
				return isSetCount();
			case METADATA:
				return isSetMetadata();
			case DATAS:
				return isSetDatas();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals( Object that ) {

		if ( that == null ) {
			return false;
		}
		if ( that instanceof ResultData ) {
			return this.equals( ( ResultData ) that );
		}
		return false;
	}

	public boolean equals( ResultData that ) {

		if ( that == null ) {
			return false;
		}

		boolean this_present_count = true;
		boolean that_present_count = true;
		if ( this_present_count || that_present_count ) {
			if ( !( this_present_count && that_present_count ) ) {
				return false;
			}
			if ( this.count != that.count ) {
				return false;
			}
		}

		boolean this_present_metadata = true && this.isSetMetadata();
		boolean that_present_metadata = true && that.isSetMetadata();
		if ( this_present_metadata || that_present_metadata ) {
			if ( !( this_present_metadata && that_present_metadata ) ) {
				return false;
			}
			if ( !this.metadata.equals( that.metadata ) ) {
				return false;
			}
		}

		boolean this_present_datas = true && this.isSetDatas();
		boolean that_present_datas = true && that.isSetDatas();
		if ( this_present_datas || that_present_datas ) {
			if ( !( this_present_datas && that_present_datas ) ) {
				return false;
			}
			if ( !this.datas.equals( that.datas ) ) {
				return false;
			}
		}

		return true;
	}

	@Override
	public int hashCode() {

		return 0;
	}

	public int compareTo( ResultData other ) {

		if ( !getClass().equals( other.getClass() ) ) {
			return getClass().getName().compareTo( other.getClass().getName() );
		}

		int        lastComparison = 0;
		ResultData typedOther     = ( ResultData ) other;

		lastComparison = Boolean.valueOf( isSetCount() ).compareTo( typedOther.isSetCount() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetCount() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.count, typedOther.count );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf( isSetMetadata() ).compareTo( typedOther.isSetMetadata() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetMetadata() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.metadata, typedOther.metadata );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf( isSetDatas() ).compareTo( typedOther.isSetDatas() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetDatas() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.datas, typedOther.datas );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId( int fieldId ) {

		return _Fields.findByThriftId( fieldId );
	}

	public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {

		schemes.get( iprot.getScheme() ).getScheme().read( iprot, this );
	}

	public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {

		schemes.get( oprot.getScheme() ).getScheme().write( oprot, this );
	}

	@Override
	public String toString() {

		StringBuilder sb    = new StringBuilder( "ResultData(" );
		boolean       first = true;

		sb.append( "count:" );
		sb.append( this.count );
		first = false;
		if ( !first ) {
			sb.append( ", " );
		}
		sb.append( "metadata:" );
		if ( this.metadata == null ) {
			sb.append( "null" );
		} else {
			sb.append( this.metadata );
		}
		first = false;
		if ( !first ) {
			sb.append( ", " );
		}
		sb.append( "datas:" );
		if ( this.datas == null ) {
			sb.append( "null" );
		} else {
			sb.append( this.datas );
		}
		first = false;
		sb.append( ")" );
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {

		try {
			write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
		} catch ( org.apache.thrift.TException te ) {
			throw new java.io.IOException( te );
		}
	}

	private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, ClassNotFoundException {

		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
		} catch ( org.apache.thrift.TException te ) {
			throw new java.io.IOException( te );
		}
	}

	private static class ResultDataStandardSchemeFactory implements SchemeFactory {

		public ResultDataStandardScheme getScheme() {

			return new ResultDataStandardScheme();
		}
	}

	private static class ResultDataStandardScheme extends StandardScheme< ResultData > {

		public void read( org.apache.thrift.protocol.TProtocol iprot, ResultData struct ) throws org.apache.thrift.TException {

			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while ( true ) {
				schemeField = iprot.readFieldBegin();
				if ( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
					break;
				}
				switch ( schemeField.id ) {
					case 1: // COUNT
						if ( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
							struct.count = iprot.readI32();
							struct.setCountIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					case 2: // METADATA
						if ( schemeField.type == org.apache.thrift.protocol.TType.LIST ) {
							{
								org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
								struct.metadata = new ArrayList< String >( _list0.size );
								for ( int _i1 = 0; _i1 < _list0.size; ++_i1 ) {
									String _elem2; // required
									_elem2 = iprot.readString();
									struct.metadata.add( _elem2 );
								}
								iprot.readListEnd();
							}
							struct.setMetadataIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					case 3: // DATAS
						if ( schemeField.type == org.apache.thrift.protocol.TType.LIST ) {
							{
								org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
								struct.datas = new ArrayList< List< String > >( _list3.size );
								for ( int _i4 = 0; _i4 < _list3.size; ++_i4 ) {
									List< String > _elem5; // required
									{
										org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
										_elem5 = new ArrayList< String >( _list6.size );
										for ( int _i7 = 0; _i7 < _list6.size; ++_i7 ) {
											String _elem8; // required
											_elem8 = iprot.readString();
											_elem5.add( _elem8 );
										}
										iprot.readListEnd();
									}
									struct.datas.add( _elem5 );
								}
								iprot.readListEnd();
							}
							struct.setDatasIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot, ResultData struct ) throws org.apache.thrift.TException {

			struct.validate();

			oprot.writeStructBegin( STRUCT_DESC );
			oprot.writeFieldBegin( COUNT_FIELD_DESC );
			oprot.writeI32( struct.count );
			oprot.writeFieldEnd();
			if ( struct.metadata != null ) {
				oprot.writeFieldBegin( METADATA_FIELD_DESC );
				{
					oprot.writeListBegin( new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.STRING, struct.metadata.size() ) );
					for ( String _iter9 : struct.metadata ) {
						oprot.writeString( _iter9 );
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			if ( struct.datas != null ) {
				oprot.writeFieldBegin( DATAS_FIELD_DESC );
				{
					oprot.writeListBegin( new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.LIST, struct.datas.size() ) );
					for ( List< String > _iter10 : struct.datas ) {
						{
							oprot.writeListBegin( new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.STRING, _iter10.size() ) );
							for ( String _iter11 : _iter10 ) {
								oprot.writeString( _iter11 );
							}
							oprot.writeListEnd();
						}
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ResultDataTupleSchemeFactory implements SchemeFactory {

		public ResultDataTupleScheme getScheme() {

			return new ResultDataTupleScheme();
		}
	}

	private static class ResultDataTupleScheme extends TupleScheme< ResultData > {

		@Override
		public void write( org.apache.thrift.protocol.TProtocol prot, ResultData struct ) throws org.apache.thrift.TException {

			TTupleProtocol oprot     = ( TTupleProtocol ) prot;
			BitSet         optionals = new BitSet();
			if ( struct.isSetCount() ) {
				optionals.set( 0 );
			}
			if ( struct.isSetMetadata() ) {
				optionals.set( 1 );
			}
			if ( struct.isSetDatas() ) {
				optionals.set( 2 );
			}
			oprot.writeBitSet( optionals, 3 );
			if ( struct.isSetCount() ) {
				oprot.writeI32( struct.count );
			}
			if ( struct.isSetMetadata() ) {
				{
					oprot.writeI32( struct.metadata.size() );
					for ( String _iter12 : struct.metadata ) {
						oprot.writeString( _iter12 );
					}
				}
			}
			if ( struct.isSetDatas() ) {
				{
					oprot.writeI32( struct.datas.size() );
					for ( List< String > _iter13 : struct.datas ) {
						{
							oprot.writeI32( _iter13.size() );
							for ( String _iter14 : _iter13 ) {
								oprot.writeString( _iter14 );
							}
						}
					}
				}
			}
		}

		@Override
		public void read( org.apache.thrift.protocol.TProtocol prot, ResultData struct ) throws org.apache.thrift.TException {

			TTupleProtocol iprot    = ( TTupleProtocol ) prot;
			BitSet         incoming = iprot.readBitSet( 3 );
			if ( incoming.get( 0 ) ) {
				struct.count = iprot.readI32();
				struct.setCountIsSet( true );
			}
			if ( incoming.get( 1 ) ) {
				{
					org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.STRING, iprot.readI32() );
					struct.metadata = new ArrayList< String >( _list15.size );
					for ( int _i16 = 0; _i16 < _list15.size; ++_i16 ) {
						String _elem17; // required
						_elem17 = iprot.readString();
						struct.metadata.add( _elem17 );
					}
				}
				struct.setMetadataIsSet( true );
			}
			if ( incoming.get( 2 ) ) {
				{
					org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.LIST, iprot.readI32() );
					struct.datas = new ArrayList< List< String > >( _list18.size );
					for ( int _i19 = 0; _i19 < _list18.size; ++_i19 ) {
						List< String > _elem20; // required
						{
							org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.STRING, iprot.readI32() );
							_elem20 = new ArrayList< String >( _list21.size );
							for ( int _i22 = 0; _i22 < _list21.size; ++_i22 ) {
								String _elem23; // required
								_elem23 = iprot.readString();
								_elem20.add( _elem23 );
							}
						}
						struct.datas.add( _elem20 );
					}
				}
				struct.setDatasIsSet( true );
			}
		}
	}

}

