/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package bj.bigData.HBase.ex03.query.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class Result implements org.apache.thrift.TBase< Result, Result._Fields >, java.io.Serializable, Cloneable {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "Result" );

	private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC   = new org.apache.thrift.protocol.TField( "session", org.apache.thrift.protocol.TType.STRING, ( short ) 1 );
	private static final org.apache.thrift.protocol.TField ERRORCODE_FIELD_DESC = new org.apache.thrift.protocol.TField( "errorcode", org.apache.thrift.protocol.TType.I32, ( short ) 2 );
	private static final org.apache.thrift.protocol.TField ERRORMSG_FIELD_DESC  = new org.apache.thrift.protocol.TField( "errormsg", org.apache.thrift.protocol.TType.STRING, ( short ) 3 );
	private static final org.apache.thrift.protocol.TField DATAS_FIELD_DESC     = new org.apache.thrift.protocol.TField( "datas", org.apache.thrift.protocol.TType.STRUCT, ( short ) 4 );

	private static final Map< Class< ? extends IScheme >, SchemeFactory > schemes = new HashMap< Class< ? extends IScheme >, SchemeFactory >();

	static {
		schemes.put( StandardScheme.class, new ResultStandardSchemeFactory() );
		schemes.put( TupleScheme.class, new ResultTupleSchemeFactory() );
	}

	public String     session; // required
	public int        errorcode; // required
	public String     errormsg; // required
	public ResultData datas; // required

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SESSION( ( short ) 1, "session" ),
		ERRORCODE( ( short ) 2, "errorcode" ),
		ERRORMSG( ( short ) 3, "errormsg" ),
		DATAS( ( short ) 4, "datas" );

		private static final Map< String, _Fields > byName = new HashMap< String, _Fields >();

		static {
			for ( _Fields field : EnumSet.allOf( _Fields.class ) ) {
				byName.put( field.getFieldName(), field );
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId( int fieldId ) {

			switch ( fieldId ) {
				case 1: // SESSION
					return SESSION;
				case 2: // ERRORCODE
					return ERRORCODE;
				case 3: // ERRORMSG
					return ERRORMSG;
				case 4: // DATAS
					return DATAS;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow( int fieldId ) {

			_Fields fields = findByThriftId( fieldId );
			if ( fields == null ) {
				throw new IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
			}
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName( String name ) {

			return byName.get( name );
		}

		private final short  _thriftId;
		private final String _fieldName;

		_Fields( short thriftId, String fieldName ) {

			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {

			return _thriftId;
		}

		public String getFieldName() {

			return _fieldName;
		}
	}

	// isset id assignments
	private static final int  __ERRORCODE_ISSET_ID = 0;
	private              byte __isset_bitfield     = 0;
	public static final Map< _Fields, org.apache.thrift.meta_data.FieldMetaData > metaDataMap;

	static {
		Map< _Fields, org.apache.thrift.meta_data.FieldMetaData > tmpMap = new EnumMap< _Fields, org.apache.thrift.meta_data.FieldMetaData >( _Fields.class );
		tmpMap.put( _Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData( "session", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) );
		tmpMap.put( _Fields.ERRORCODE, new org.apache.thrift.meta_data.FieldMetaData( "errorcode", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
		tmpMap.put( _Fields.ERRORMSG, new org.apache.thrift.meta_data.FieldMetaData( "errormsg", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) );
		tmpMap.put( _Fields.DATAS, new org.apache.thrift.meta_data.FieldMetaData( "datas", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData( org.apache.thrift.protocol.TType.STRUCT, ResultData.class ) ) );
		metaDataMap = Collections.unmodifiableMap( tmpMap );
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( Result.class, metaDataMap );
	}

	public Result() {

	}

	public Result(
			String session,
			int errorcode,
			String errormsg,
			ResultData datas ) {

		this();
		this.session = session;
		this.errorcode = errorcode;
		setErrorcodeIsSet( true );
		this.errormsg = errormsg;
		this.datas = datas;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Result( Result other ) {

		__isset_bitfield = other.__isset_bitfield;
		if ( other.isSetSession() ) {
			this.session = other.session;
		}
		this.errorcode = other.errorcode;
		if ( other.isSetErrormsg() ) {
			this.errormsg = other.errormsg;
		}
		if ( other.isSetDatas() ) {
			this.datas = new ResultData( other.datas );
		}
	}

	public Result deepCopy() {

		return new Result( this );
	}

	@Override
	public void clear() {

		this.session = null;
		setErrorcodeIsSet( false );
		this.errorcode = 0;
		this.errormsg = null;
		this.datas = null;
	}

	public String getSession() {

		return this.session;
	}

	public Result setSession( String session ) {

		this.session = session;
		return this;
	}

	public void unsetSession() {

		this.session = null;
	}

	/** Returns true if field session is set (has been assigned a value) and false otherwise */
	public boolean isSetSession() {

		return this.session != null;
	}

	public void setSessionIsSet( boolean value ) {

		if ( !value ) {
			this.session = null;
		}
	}

	public int getErrorcode() {

		return this.errorcode;
	}

	public Result setErrorcode( int errorcode ) {

		this.errorcode = errorcode;
		setErrorcodeIsSet( true );
		return this;
	}

	public void unsetErrorcode() {

		__isset_bitfield = EncodingUtils.clearBit( __isset_bitfield, __ERRORCODE_ISSET_ID );
	}

	/** Returns true if field errorcode is set (has been assigned a value) and false otherwise */
	public boolean isSetErrorcode() {

		return EncodingUtils.testBit( __isset_bitfield, __ERRORCODE_ISSET_ID );
	}

	public void setErrorcodeIsSet( boolean value ) {

		__isset_bitfield = EncodingUtils.setBit( __isset_bitfield, __ERRORCODE_ISSET_ID, value );
	}

	public String getErrormsg() {

		return this.errormsg;
	}

	public Result setErrormsg( String errormsg ) {

		this.errormsg = errormsg;
		return this;
	}

	public void unsetErrormsg() {

		this.errormsg = null;
	}

	/** Returns true if field errormsg is set (has been assigned a value) and false otherwise */
	public boolean isSetErrormsg() {

		return this.errormsg != null;
	}

	public void setErrormsgIsSet( boolean value ) {

		if ( !value ) {
			this.errormsg = null;
		}
	}

	public ResultData getDatas() {

		return this.datas;
	}

	public Result setDatas( ResultData datas ) {

		this.datas = datas;
		return this;
	}

	public void unsetDatas() {

		this.datas = null;
	}

	/** Returns true if field datas is set (has been assigned a value) and false otherwise */
	public boolean isSetDatas() {

		return this.datas != null;
	}

	public void setDatasIsSet( boolean value ) {

		if ( !value ) {
			this.datas = null;
		}
	}

	public void setFieldValue( _Fields field, Object value ) {

		switch ( field ) {
			case SESSION:
				if ( value == null ) {
					unsetSession();
				} else {
					setSession( ( String ) value );
				}
				break;

			case ERRORCODE:
				if ( value == null ) {
					unsetErrorcode();
				} else {
					setErrorcode( ( Integer ) value );
				}
				break;

			case ERRORMSG:
				if ( value == null ) {
					unsetErrormsg();
				} else {
					setErrormsg( ( String ) value );
				}
				break;

			case DATAS:
				if ( value == null ) {
					unsetDatas();
				} else {
					setDatas( ( ResultData ) value );
				}
				break;

		}
	}

	public Object getFieldValue( _Fields field ) {

		switch ( field ) {
			case SESSION:
				return getSession();

			case ERRORCODE:
				return Integer.valueOf( getErrorcode() );

			case ERRORMSG:
				return getErrormsg();

			case DATAS:
				return getDatas();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet( _Fields field ) {

		if ( field == null ) {
			throw new IllegalArgumentException();
		}

		switch ( field ) {
			case SESSION:
				return isSetSession();
			case ERRORCODE:
				return isSetErrorcode();
			case ERRORMSG:
				return isSetErrormsg();
			case DATAS:
				return isSetDatas();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals( Object that ) {

		if ( that == null ) {
			return false;
		}
		if ( that instanceof Result ) {
			return this.equals( ( Result ) that );
		}
		return false;
	}

	public boolean equals( Result that ) {

		if ( that == null ) {
			return false;
		}

		boolean this_present_session = true && this.isSetSession();
		boolean that_present_session = true && that.isSetSession();
		if ( this_present_session || that_present_session ) {
			if ( !( this_present_session && that_present_session ) ) {
				return false;
			}
			if ( !this.session.equals( that.session ) ) {
				return false;
			}
		}

		boolean this_present_errorcode = true;
		boolean that_present_errorcode = true;
		if ( this_present_errorcode || that_present_errorcode ) {
			if ( !( this_present_errorcode && that_present_errorcode ) ) {
				return false;
			}
			if ( this.errorcode != that.errorcode ) {
				return false;
			}
		}

		boolean this_present_errormsg = true && this.isSetErrormsg();
		boolean that_present_errormsg = true && that.isSetErrormsg();
		if ( this_present_errormsg || that_present_errormsg ) {
			if ( !( this_present_errormsg && that_present_errormsg ) ) {
				return false;
			}
			if ( !this.errormsg.equals( that.errormsg ) ) {
				return false;
			}
		}

		boolean this_present_datas = true && this.isSetDatas();
		boolean that_present_datas = true && that.isSetDatas();
		if ( this_present_datas || that_present_datas ) {
			if ( !( this_present_datas && that_present_datas ) ) {
				return false;
			}
			if ( !this.datas.equals( that.datas ) ) {
				return false;
			}
		}

		return true;
	}

	@Override
	public int hashCode() {

		return 0;
	}

	public int compareTo( Result other ) {

		if ( !getClass().equals( other.getClass() ) ) {
			return getClass().getName().compareTo( other.getClass().getName() );
		}

		int    lastComparison = 0;
		Result typedOther     = ( Result ) other;

		lastComparison = Boolean.valueOf( isSetSession() ).compareTo( typedOther.isSetSession() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetSession() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.session, typedOther.session );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf( isSetErrorcode() ).compareTo( typedOther.isSetErrorcode() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetErrorcode() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.errorcode, typedOther.errorcode );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf( isSetErrormsg() ).compareTo( typedOther.isSetErrormsg() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetErrormsg() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.errormsg, typedOther.errormsg );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf( isSetDatas() ).compareTo( typedOther.isSetDatas() );
		if ( lastComparison != 0 ) {
			return lastComparison;
		}
		if ( isSetDatas() ) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.datas, typedOther.datas );
			if ( lastComparison != 0 ) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId( int fieldId ) {

		return _Fields.findByThriftId( fieldId );
	}

	public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {

		schemes.get( iprot.getScheme() ).getScheme().read( iprot, this );
	}

	public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {

		schemes.get( oprot.getScheme() ).getScheme().write( oprot, this );
	}

	@Override
	public String toString() {

		StringBuilder sb    = new StringBuilder( "Result(" );
		boolean       first = true;

		sb.append( "session:" );
		if ( this.session == null ) {
			sb.append( "null" );
		} else {
			sb.append( this.session );
		}
		first = false;
		if ( !first ) {
			sb.append( ", " );
		}
		sb.append( "errorcode:" );
		sb.append( this.errorcode );
		first = false;
		if ( !first ) {
			sb.append( ", " );
		}
		sb.append( "errormsg:" );
		if ( this.errormsg == null ) {
			sb.append( "null" );
		} else {
			sb.append( this.errormsg );
		}
		first = false;
		if ( !first ) {
			sb.append( ", " );
		}
		sb.append( "datas:" );
		if ( this.datas == null ) {
			sb.append( "null" );
		} else {
			sb.append( this.datas );
		}
		first = false;
		sb.append( ")" );
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if ( datas != null ) {
			datas.validate();
		}
	}

	private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {

		try {
			write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
		} catch ( org.apache.thrift.TException te ) {
			throw new java.io.IOException( te );
		}
	}

	private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, ClassNotFoundException {

		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
		} catch ( org.apache.thrift.TException te ) {
			throw new java.io.IOException( te );
		}
	}

	private static class ResultStandardSchemeFactory implements SchemeFactory {

		public ResultStandardScheme getScheme() {

			return new ResultStandardScheme();
		}
	}

	private static class ResultStandardScheme extends StandardScheme< Result > {

		public void read( org.apache.thrift.protocol.TProtocol iprot, Result struct ) throws org.apache.thrift.TException {

			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while ( true ) {
				schemeField = iprot.readFieldBegin();
				if ( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
					break;
				}
				switch ( schemeField.id ) {
					case 1: // SESSION
						if ( schemeField.type == org.apache.thrift.protocol.TType.STRING ) {
							struct.session = iprot.readString();
							struct.setSessionIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					case 2: // ERRORCODE
						if ( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
							struct.errorcode = iprot.readI32();
							struct.setErrorcodeIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					case 3: // ERRORMSG
						if ( schemeField.type == org.apache.thrift.protocol.TType.STRING ) {
							struct.errormsg = iprot.readString();
							struct.setErrormsgIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					case 4: // DATAS
						if ( schemeField.type == org.apache.thrift.protocol.TType.STRUCT ) {
							struct.datas = new ResultData();
							struct.datas.read( iprot );
							struct.setDatasIsSet( true );
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot, Result struct ) throws org.apache.thrift.TException {

			struct.validate();

			oprot.writeStructBegin( STRUCT_DESC );
			if ( struct.session != null ) {
				oprot.writeFieldBegin( SESSION_FIELD_DESC );
				oprot.writeString( struct.session );
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin( ERRORCODE_FIELD_DESC );
			oprot.writeI32( struct.errorcode );
			oprot.writeFieldEnd();
			if ( struct.errormsg != null ) {
				oprot.writeFieldBegin( ERRORMSG_FIELD_DESC );
				oprot.writeString( struct.errormsg );
				oprot.writeFieldEnd();
			}
			if ( struct.datas != null ) {
				oprot.writeFieldBegin( DATAS_FIELD_DESC );
				struct.datas.write( oprot );
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ResultTupleSchemeFactory implements SchemeFactory {

		public ResultTupleScheme getScheme() {

			return new ResultTupleScheme();
		}
	}

	private static class ResultTupleScheme extends TupleScheme< Result > {

		@Override
		public void write( org.apache.thrift.protocol.TProtocol prot, Result struct ) throws org.apache.thrift.TException {

			TTupleProtocol oprot     = ( TTupleProtocol ) prot;
			BitSet         optionals = new BitSet();
			if ( struct.isSetSession() ) {
				optionals.set( 0 );
			}
			if ( struct.isSetErrorcode() ) {
				optionals.set( 1 );
			}
			if ( struct.isSetErrormsg() ) {
				optionals.set( 2 );
			}
			if ( struct.isSetDatas() ) {
				optionals.set( 3 );
			}
			oprot.writeBitSet( optionals, 4 );
			if ( struct.isSetSession() ) {
				oprot.writeString( struct.session );
			}
			if ( struct.isSetErrorcode() ) {
				oprot.writeI32( struct.errorcode );
			}
			if ( struct.isSetErrormsg() ) {
				oprot.writeString( struct.errormsg );
			}
			if ( struct.isSetDatas() ) {
				struct.datas.write( oprot );
			}
		}

		@Override
		public void read( org.apache.thrift.protocol.TProtocol prot, Result struct ) throws org.apache.thrift.TException {

			TTupleProtocol iprot    = ( TTupleProtocol ) prot;
			BitSet         incoming = iprot.readBitSet( 4 );
			if ( incoming.get( 0 ) ) {
				struct.session = iprot.readString();
				struct.setSessionIsSet( true );
			}
			if ( incoming.get( 1 ) ) {
				struct.errorcode = iprot.readI32();
				struct.setErrorcodeIsSet( true );
			}
			if ( incoming.get( 2 ) ) {
				struct.errormsg = iprot.readString();
				struct.setErrormsgIsSet( true );
			}
			if ( incoming.get( 3 ) ) {
				struct.datas = new ResultData();
				struct.datas.read( iprot );
				struct.setDatasIsSet( true );
			}
		}
	}

}

