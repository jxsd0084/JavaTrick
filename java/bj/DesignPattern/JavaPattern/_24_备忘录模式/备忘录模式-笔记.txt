（在不破坏封装性的前提下，捕获一个对象的内部状
态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。）


24.3 备忘录模式的应用

    由于备忘录模式有太多的变形和处理方式，每种方式都有它自己的优点和缺点，标准的
备忘录模式很难在项目中遇到，基本上都有一些变换处理方式。因此，我们在使用备忘录模
式时主要了解如何应用以及需要注意哪些事项就成了。

24.3.1 备忘录模式的使用场景

● 需要保存和恢复数据的相关状态场景。

● 提供一个可回滚（rollback）的操作；比如Word中的CTRL+Z组合键，IE浏览器中的后
退按钮，文件管理器上的backspace键等。

● 需要监控的副本场景中。例如要监控一个对象的属性，但是监控又不应该作为系统的
主业务来调用，它只是边缘应用，即使出现监控不准、错误报警也影响不大，因此一般的做
法是备份一个主线程中的对象，然后由分析程序来分析。

● 数据库连接的事务管理就是用的备忘录模式，想想看，如果你要实现一个JDBC驱
动，你怎么来实现事务？还不是用备忘录模式嘛！


24.3.2 备忘录模式的注意事项

● 备忘录的生命期
    备忘录创建出来就要在“最近”的代码中使用，要主动管理它的生命周期，建立就要使
用，不使用就要立刻删除其引用，等待垃圾回收器对它的回收处理。

● 备忘录的性能
    不要在频繁建立备份的场景中使用备忘录模式（比如一个for循环中），原因有二：一是控制不了备忘录建立的对象数量；二是大对象的建立是要消耗资源的，系统的性能需要考
虑。因此，如果出现这样的代码，设计师就应该好好想想怎么修改架构了。


24.5 最佳实践

    备忘录模式是我们设计上“月光宝盒”，可以让我们回到需要的年代；是程序数据的“后
悔药”，吃了它就可以返回上一个状态；是设计人员的定心丸，确保即使在最坏的情况下也
能获得最近的对象状态。如果大家看懂了的话，请各位在设计的时候就不要使用数据库的临
时表作为缓存备份数据了，虽然是一个简单的办法，但是它加大了数据库操作的频繁度，把
压力下放到数据库了，最好的解决办法就是使用备忘录模式。