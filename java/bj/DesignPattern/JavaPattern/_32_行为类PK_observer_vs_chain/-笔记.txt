32.1.3 小结

    策略模式和命令模式相似，特别是命令模式退化时，比如无接收者（接收者非常简单或
者接收者是一个Java的基础操作，无需专门编写一个接收者），在这种情况下，命令模式和
策略模式的类图完全一样，代码实现也比较类似，但是两者还是有区别的。

● 关注点不同策略模式关注的是算法替换的问题，一个新的算法投产，旧算法退休，或者提供多种算
    法由调用者自己选择使用，算法的自由更替是它实现的要点。换句话说，策略模式关注的是
算法的完整性、封装性，只有具备了这两个条件才能保证其可以自由切换。
命令模式则关注的是解耦问题，如何让请求者和执行者解耦是它需要首先解决的，解耦
的要求就是把请求的内容封装为一个一个的命令，由接收者执行。由于封装成了命令，就同
时可以对命令进行多种处理，例如撤销、记录等。

● 角色功能不同
    在我们的例子中，策略模式中的抽象算法和具体算法与命令模式的接收者非常相似，但
是它们的职责不同。策略模式中的具体算法是负责一个完整算法逻辑，它是不可再拆分的原
子业务单元，一旦变更就是对算法整体的变更。
而命令模式则不同，它关注命令的实现，也就是功能的实现。例如我们在分支中也提到
接收者的变更问题，它只影响到命令族的变更，对请求者没有任何影响，从这方面来说，接
收者对命令负责，而与请求者无关。命令模式中的接收者只要符合六大设计原则，完全不用
关心它是否完成了一个具体逻辑，它的影响范围也仅仅是抽象命令和具体命令，对它的修改
不会扩散到模式外的模块。
当然，如果在命令模式中需要指定接收者，则需要考虑接收者的变化和封装，例如一个
老顾客每次吃饭都点同一个厨师的饭菜，那就必须考虑接收者的抽象化问题。

● 使用场景不同
    策略模式适用于算法要求变换的场景，而命令模式适用于解耦两个有紧耦合关系的对象
场合或者多命令多撤销的场景。