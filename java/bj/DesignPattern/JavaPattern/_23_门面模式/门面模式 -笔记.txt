门面模式（Facade Pattern）也叫做外观模式，是一种比较常用的封装模式，其定义如
下：


Provide a unified interface to a set of interfaces in a subsystem.Facade defines a higher-level
interface that makes the subsystem easier to use.


（要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。
门面模式提供一个高层次的接口，使得子系统更易于使用。）


23.3 门面模式的应用

23.3.1 门面模式的优点

门面模式有如下优点。

● 减少系统的相互依赖
    想想看，如果我们不使用门面模式，外界访问直接深入到子系统内部，相互之间是一种
强耦合关系，你死我就死，你活我才能活，这样的强依赖是系统设计所不能接受的，门面模
式的出现就很好地解决了该问题，所有的依赖都是对门面对象的依赖，与子系统无关。

● 提高了灵活性
    依赖减少了，灵活性自然提高了。不管子系统内部如何变化，只要不影响到门面对象，
任你自由活动。

● 提高安全性
    想让你访问子系统的哪些业务就开通哪些逻辑，不在门面上开通的方法，你休想访问
到。


23.3.2 门面模式的缺点
    门面模式最大的缺点就是不符合开闭原则，对修改关闭，对扩展开放，看看我们那个门
面对象吧，它可是重中之重，一旦在系统投产后发现有一个小错误，你怎么解决？完全遵从
开闭原则，根本没办法解决。继承？覆写？都顶不上用，唯一能做的一件事就是修改门面角
色的代码，这个风险相当大，这就需要大家在设计的时候慎之又慎，多思考几遍才会有好收
获。


23.3.3 门面模式的使用场景

● 为一个复杂的模块或子系统提供一个供外界访问的接口

● 子系统相对独立——外界对子系统的访问只要黑箱操作即可
    比如利息的计算问题，没有深厚的业务知识和扎实的技术水平是不可能开发出该子系统
的，但是对于使用该系统的开发人员来说，他需要做的就是输入金额以及存期，其他的都不
用关心，返回的结果就是利息，这时候，门面模式是非使用不可了。

● 预防低水平人员带来的风险扩散
    比如一个低水平的技术人员参与项目开发，为降低个人代码质量对整体项目的影响风
险，一般的做法是“画地为牢”，只能在指定的子系统中开发，然后再提供门面接口进行访问
操作。


23.4 门面模式的注意事项

23.4.1 一个子系统可以有多个门面

● 门面已经庞大到不能忍受的程度

● 子系统可以提供不同访问路径


23.4.2 门面不参与子系统内的业务逻辑


23.5 最佳实践

    门面模式是一个很好的封装方法，一个子系统比较复杂时，比如算法或者业务比较复
杂，就可以封装出一个或多个门面出来，项目的结构简单，而且扩展性非常好。还有，对于
一个较大项目，为了避免人员带来的风险，也可以使用门面模式，技术水平比较差的成员，
尽量安排独立的模块，然后把他写的程序封装到一个门面里，尽量让其他项目成员不用看到
这些人的代码，看也看不懂，我也遇到过一个“高人”写的代码，private方法、构造函数、常
量基本都不用，你要一个public方法，好，一个类里就一个public方法，所有代码都在里面，
然后你就看吧，一大坨程序，看着就能把人逼疯。使用门面模式后，对门面进行单元测试，
约束项目成员的代码质量，对项目整体质量的提升也是一个比较好的帮助。








