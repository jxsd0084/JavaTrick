第2章　里氏替换原则

2.1 爱恨纠葛的父子关系

    在面向对象的语言中，继承是必不可少的、非常优秀的语言机制，它有如下优点：

● 代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性；

● 提高代码的重用性；

● 子类可以形似父类，但又异于父类，“龙生龙，凤生凤，老鼠生来会打洞”是说子拥有
父的“种”，“世界上没有两片完全相同的叶子”是指明子与父的不同；

● 提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，君不见很多开源框架的
扩展接口都是通过继承父类来完成的；

● 提高产品或项目的开放性。


    自然界的所有事物都是优点和缺点并存的，即使是鸡蛋，有时候也能挑出骨头来，继承
的缺点如下：

● 继承是侵入性的。只要继承，就必须拥有父类的所有属性和方法；

● 降低代码的灵活性。子类必须拥有父类的属性和方法，让子类自由的世界中多了些约
束；

● 增强了耦合性。当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在
缺乏规范的环境下，这种修改可能带来非常糟糕的结果——大段的代码需要重构。


2.2 纠纷不断，规则压制

里氏替换原则为良好的继承定义了一个规范，一句简单的定义包含了4层含义。

1.子类必须完全实现父类的方法

注意　在类中调用其他类时务必要使用父类或接口，如果不能使用父类或接口，则说明
类的设计已经违背了LSP原则。

注意　如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发
生“畸变”，则建议断开父子继承关系，采用依赖、聚集、组合等关系代替继承。

2.子类可以有自己的个性

3.覆盖或实现父类的方法时输入参数可以被放大

4. 覆写或实现父类的方法时输出结果可以被缩小


    采用里氏替换原则的目的就是增强程序的健壮性，版本升级时也可以保持非常好的兼容
性。即使增加子类，原有的子类还可以继续运行。在实际项目中，每个子类对应不同的业务
含义，使用父类作为参数，传递不同的子类完成不同的业务逻辑，非常完美！


2.3 最佳实践

    在项目中，采用里氏替换原则时，尽量避免子类的“个性”，一旦子类有“个性”，这个子
类和父类之间的关系就很难调和了，把子类当做父类使用，子类的“个性”被抹杀——委屈了
点；把子类单独作为一个业务来使用，则会让代码间的耦合关系变得扑朔迷离——缺乏类替
换的标准。







