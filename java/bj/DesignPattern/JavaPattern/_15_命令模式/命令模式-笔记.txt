（将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请
求排队或者记录请求日志，可以提供命令的撤销和恢复功能。）


15.3 命令模式的应用

15.3.1 命令模式的优点

● 类间解耦
    调用者角色与接收者角色之间没有任何依赖关系，调用者实现功能时只需调用Command
抽象类的execute方法就可以，不需要了解到底是哪个接收者执行。

● 可扩展性
    Command的子类可以非常容易地扩展，而调用者Invoker和高层次的模块Client不产生严
重的代码耦合。

● 命令模式结合其他模式会更优秀
    命令模式可以结合责任链模式，实现命令族解析任务；结合模板方法模式，则可以减少
Command子类的膨胀问题。


15.3.3 命令模式的使用场景

    只要你认为是命令的地方就可以采用命令模式，例如，在GUI开发中，一个按钮的点击
是一个命令，可以采用命令模式；模拟DOS命令的时候，当然也要采用命令模式；触发－反馈机制的处理等。



15.4 命令模式的扩展

15.4.1 未讲完的故事

15.4.2 反悔问题

15.5 最佳实践


