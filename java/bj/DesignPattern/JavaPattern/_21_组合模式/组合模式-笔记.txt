（将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。）


21.3 组合模式的应用

21.3.1 组合模式的优点

● 高层模块调用简单
    一棵树形机构中的所有节点都是Component，局部和整体对调用者来说没有任何区别，
也就是说，高层模块不必关心自己处理的是单个对象还是整个组合结构，简化了高层模块的
代码。

● 节点自由增加
    使用了组合模式后，我们可以看看，如果想增加一个树枝节点、树叶节点是不是都很容
易，只要找到它的父节点就成，非常容易扩展，符合开闭原则，对以后的维护非常有利。


21.3.2 组合模式的缺点
    组合模式有一个非常明显的缺点，看到我们在场景类中的定义，提到树叶和树枝使用时
的定义了吗？直接使用了实现类！这在面向接口编程上是很不恰当的，与依赖倒置原则冲
突，读者在使用的时候要考虑清楚，它限制了你接口的影响范围。


21.3.3 组合模式的使用场景

● 维护和展示部分-整体关系的场景，如树形菜单、文件和文件夹管理。

● 从一个整体中能够独立出部分模块或功能的场景。


21.3.4 组合模式的注意事项

    只要是树形结构，就要考虑使用组合模式，这个一定要记住，只要是要体现局部和整体
的关系的时候，而且这种关系还可能比较深，考虑一下组合模式吧。


21.4 组合模式的扩展

21.4.1 真实的组合模式

21.4.2 透明的组合模式

21.4.3 组合模式的遍历


21.5 最佳实践

    组合模式在项目中到处都有，比如现在的页面结构一般都是上下结构，上面放系统的
Logo，下边分为两部分：左边是导航菜单，右边是展示区，左边的导航菜单一般都是树形的
结构，比较清晰，有非常多的JavaScript源码实现了类似的树形菜单，大家可以到网上搜索
一下。

    还有，大家常用的XML结构也是一个树形结构，根节点、元素节点、值元素这些都与我
们的组合模式相匹配，之所以本章节不以XML为例子讲解，是因为很少有人还直接读写
XML文件，一般都是用JDOM或者DOM4J了。

    还有一个非常重要的例子：我们自己本身也是一个树状结构的一个树枝或树叶。根据我
能够找到我的父母，根据父亲又能找到爷爷奶奶，根据母亲能够找到外公外婆等，很典型的
树形结构，而且还很规范（这个要是不规范那肯定乱套了）。


