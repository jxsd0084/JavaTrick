27.3 解释器模式的应用


27.3.1 解释器模式的优点
    解释器是一个简单语法分析工具，它最显著的优点就是扩展性，修改语法规则只要修改
相应的非终结符表达式就可以了，若扩展语法，则只要增加非终结符类就可以了。


27.3.2 解释器模式的缺点

● 解释器模式会引起类膨胀
    每个语法都要产生一个非终结符表达式，语法规则比较复杂时，就可能产生大量的类文
件，为维护带来了非常多的麻烦。

● 解释器模式采用递归调用方法
    每个非终结符表达式只关心与自己有关的表达式，每个表达式需要知道最终的结果，必
须一层一层地剥茧，无论是面向过程的语言还是面向对象的语言，递归都是在必要条件下使
用的，它导致调试非常复杂。想想看，如果要排查一个语法错误，我们是不是要一个断点一
个断点地调试下去，直到最小的语法单元。

● 效率问题
    解释器模式由于使用了大量的循环和递归，效率是一个不容忽视的问题，特别是一用于
解析复杂、冗长的语法时，效率是难以忍受的。


27.3.3 解释器模式使用的场景

● 重复发生的问题可以使用解释器模式
    例如，多个应用服务器，每天产生大量的日志，需要对日志文件进行分析处理，由于各
个服务器的日志格式不同，但是数据要素是相同的，按照解释器的说法就是终结符表达式都
是相同的，但是非终结符表达式就需要制定了。在这种情况下，可以通过程序来一劳永逸地
解决该问题。

● 一个简单语法需要解释的场景
    为什么是简单？看看非终结表达式，文法规则越多，复杂度越高，而且类间还要进行递
归调用（看看我们例子中的栈）。想想看，多个类之间的调用你需要什么样的耐心和信心去
排查问题。因此，解释器模式一般用来解析比较标准的字符集，例如SQL语法分析，不过该
部分逐渐被专用工具所取代。
在某些特用的商业环境下也会采用解释器模式，我们刚刚的例子就是一个商业环境，而
且现在模型运算的例子非常多，目前很多商业机构已经能够提供出大量的数据进行分析。


27.3.4 解释器模式的注意事项

    尽量不要在重要的模块中使用解释器模式，否则维护会是一个很大的问题。在项目中可
以使用shell、JRuby、Groovy等脚本语言来代替解释器模式，弥补Java编译型语言的不足。我
们在一个银行的分析型项目中就采用JRuby进行运算处理，避免使用解释器模式的四则运
算，效率和性能各方面表现良好。


27.4 最佳实践

    解释器模式在实际的系统开发中使用得非常少，因为它会引起效率、性能以及维护等问
题，一般在大中型的框架型项目能够找到它的身影，如一些数据分析工具、报表设计工具、
科学计算工具等，若你确实遇到“一种特定类型的问题发生的频率足够高”的情况，准备使用
解释器模式时，可以考虑一下Expression4J、MESP（Math Expression String Parser）、Jep等
开源的解析工具包（这三个开源产品都可以通过百度、Google搜索到，请读者自行查询），
功能都异常强大，而且非常容易使用，效率也还不错，实现大多数的数学运算完全没有问
题，自己没有必要从头开始编写解释器。有人已经建立了一条康庄大道，何必再走自己的泥
泞小路呢？

