package bj.DesignPattern.JavaPattern._03_依赖倒置原则.section1;

/**
 * @author cbf4Life cbf4life@126.com
 *         I'm glad to share my knowledge with you all.
 *         业务场景类
 */
public class Client {

	/**
	 * 测试
	 *
	 * @param args
	 */
	public static void main( String[] args ) {

		Driver zhangSan = new Driver();
		Benz   benz     = new Benz();

		// 张三开奔驰车
		zhangSan.drive( benz );
	}

}

/*

依赖倒置原则在Java语言中的表现就是：

● 模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过
接口或抽象类产生的；

● 接口或抽象类不依赖于实现类；

● 实现类依赖接口或抽象类。更加精简的定义就是“面向接口编程”——OOD（Object-Oriented Design，面向对象设
计）的精髓之一。



依赖的三种写法

1.构造函数传递依赖对象

2.Setter方法传递依赖对象

3.接口声明依赖对象



最佳实践

● 每个类尽量都有接口或抽象类，或者抽象类和接口两者都具备

● 变量的表面类型尽量是接口或者是抽象类

● 任何类都不应该从具体类派生

● 尽量不要覆写基类的方法

● 结合里氏替换原则使用



依赖倒置原则的优点在小型项目中很难体现出来，例如小于10个人月的项目，使用简单
的SSH架构，基本上不费太大力气就可以完成，是否采用依赖倒置原则影响不大。但是，在
一个大中型项目中，采用依赖倒置原则有非常多的优点，特别是规避一些非技术因素引起的
问题。项目越大，需求变化的概率也越大，通过采用依赖倒置原则设计的接口或抽象类对实
现类进行约束，可以减少需求变化引起的工作量剧增的情况。人员的变动在大中型项目中也
是时常存在的，如果设计优良、代码结构清晰，人员变化对项目的影响基本为零。大中型项
目的维护周期一般都很长，采用依赖倒置原则可以让维护人员轻松地扩展和维护。



 */
