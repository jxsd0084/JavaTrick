（用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。）


13.3 原型模式的应用

13.3.1 原型模式的优点

● 性能优良
    原型模式是在内存二进制流的拷贝，要比直接new一个对象性能好很多，特别是要在一
个循环体内产生大量的对象时，原型模式可以更好地体现其优点。

● 逃避构造函数的约束
    这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的（参见13.4
节）。优点就是减少了约束，缺点也是减少了约束，需要大家在实际应用时考虑。


13.3.2 原型模式的使用场景

● 资源优化场景
    类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。

● 性能和安全要求的场景
    通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。

● 一个对象多个修改者的场景
    一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑
使用原型模式拷贝多个对象供调用者使用。
在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过clone的
方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与Java融为一体，大家可以随手拿来使用。


13.4 原型模式的注意事项

13.4.1 构造函数不会被执行

13.4.2 浅拷贝和深拷贝

注意　使用原型模式时，引用的成员变量必须满足两个条件才不会被拷贝：一是类的成
员变量，而不是方法内变量；二是必须是一个可变的引用对象，而不是一个原始类型或不可
变对象。

13.4.3 clone与final两个冤家

注意　要使用clone方法，类的成员变量上不要增加final关键字。


13.5 最佳实践

    原型模式先产生出一个包含大量共有信息的类，然后可以拷贝出副本，修正细节信息，
建立了一个完整的个性对象。不知道大家有没有看过施瓦辛格演的《第六日》这部电影，电
影的主线也就是一个人被复制，然后正本和副本对掐。我们今天讲的原型模式也就是由一个
正本可以创建多个副本的概念。可以这样理解：一个对象的产生可以不由零起步，直接从一
个已经具备一定雏形的对象克隆，然后再修改为生产需要的对象。也就是说，产生一个人，
可以不从1岁长到2岁，再到3岁……也可以直接找一个人，从其身上获得DNA，然后克隆一
个，直接修改一下就是30岁了！我们讲的原型模式也就是这样的功能
