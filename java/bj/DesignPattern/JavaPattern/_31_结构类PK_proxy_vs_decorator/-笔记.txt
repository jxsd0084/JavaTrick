31.1.3 最佳实践

    通过例子，我们可以看出代理模式和装饰模式有非常相似的地方，甚至代码实现都非常
相似，特别是装饰模式中省略抽象装饰角色后，两者代码基本上相同，但是还是有细微的差
别。代理模式是把当前的行为或功能委托给其他对象执行，代理类负责接口限定：是否可以
调用真实角色，以及是否对发送到真实角色的消息进行变形处理，它不对被主题角色（也就
是被代理类）的功能做任何处理，保证原汁原味的调用。代理模式使用到极致开发就是
AOP，这是各位采用Spring架构开发必然要使用到的技术，它就是使用了代理和反射的技
术。

    装饰模式是在要保证接口不变的情况下加强类的功能，它保证的是被修饰的对象功能比
原始对象丰富（当然，也可以减弱），但不做准入条件判断和准入参数过滤，如是否可以执
行类的功能，过滤输入参数是否合规等，这不是装饰模式关心的。
代理模式在Java的开发中俯拾皆是，是大家非常熟悉的模式，应用非常广泛，而装饰模
式是一个比较拘谨的模式，在实际应用中接触比较少，但是也有不少框架项目使用了装饰模
式，例如在JDK的java.io.*包中就大量使用装饰模式，类似如下的代码：
OutputStream out = new DataOutputStream（new FileOutputStream（"test.txt"））
这是装饰模式的一个典型应用，使用DataOutputStream封装了一个FileOutputStream，以方
便进行输出流处理。